//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\navigation\NavigationBarItemView.java
//

#include "BadgeDrawable.h"
#include "BadgeUtils.h"
#include "ColorStateList.h"
#include "Drawable.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IdGenerator.h"
#include "ImageView.h"
#include "J2ObjC_source.h"
#include "MenuItemImpl.h"
#include "NavigationBarItemView.h"
#include "NavigationBarView.h"
#include "PluginInvoker.h"
#include "R.h"
#include "TextUtils.h"
#include "TextView.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"


@interface ADXNavigationBarItemView () {
 @public
  jint defaultMargin_;
  jfloat shiftAmount_;
  jfloat scaleUpFactor_;
  jfloat scaleDownFactor_;
  jint labelVisibilityMode_;
  jboolean isShifting_;
  ADImageView *icon_;
  ADViewGroup *labelGroup_;
  ADTextView *smallLabel_;
  ADTextView *largeLabel_;
  jint itemPosition_;
  ADXMenuItemImpl *itemData_;
  ADDrawable *originalIconDrawable_;
  ADXBadgeDrawable *badgeDrawable_;
}

- (jint)getItemVisiblePosition;

+ (void)setViewLayoutParamsWithADView:(ADView *)view
                              withInt:(jint)topMargin
                              withInt:(jint)gravity;

+ (void)setViewScaleValuesWithADView:(ADView *)view
                           withFloat:(jfloat)scaleX
                           withFloat:(jfloat)scaleY
                             withInt:(jint)visibility;

+ (void)updateViewPaddingBottomWithADView:(ADView *)view
                                  withInt:(jint)paddingBottom;

- (void)calculateTextScaleFactorsWithFloat:(jfloat)smallLabelSize
                                 withFloat:(jfloat)largeLabelSize;

- (jboolean)hasBadge;

- (void)tryUpdateBadgeBoundsWithADView:(ADView *)anchorView;

- (void)tryAttachBadgeToAnchorWithADView:(ADView *)anchorView;

- (ADFrameLayout *)getCustomParentForBadgeWithADView:(ADView *)anchorView;

- (jint)getSuggestedIconWidth;

- (jint)getSuggestedIconHeight;

- (jint)getTextSizeWithADTextView:(ADTextView *)label;

@end

J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, icon_, ADImageView *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, labelGroup_, ADViewGroup *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, smallLabel_, ADTextView *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, largeLabel_, ADTextView *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, itemData_, ADXMenuItemImpl *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, originalIconDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADXNavigationBarItemView, badgeDrawable_, ADXBadgeDrawable *)

inline jint ADXNavigationBarItemView_get_INVALID_ITEM_POSITION(void);
#define ADXNavigationBarItemView_INVALID_ITEM_POSITION -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXNavigationBarItemView, INVALID_ITEM_POSITION, jint)

inline IOSIntArray *ADXNavigationBarItemView_get_CHECKED_STATE_SET(void);
static IOSIntArray *ADXNavigationBarItemView_CHECKED_STATE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXNavigationBarItemView, CHECKED_STATE_SET, IOSIntArray *)

__attribute__((unused)) static jint ADXNavigationBarItemView_getItemVisiblePosition(ADXNavigationBarItemView *self);

__attribute__((unused)) static void ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(ADView *view, jint topMargin, jint gravity);

__attribute__((unused)) static void ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(ADView *view, jfloat scaleX, jfloat scaleY, jint visibility);

__attribute__((unused)) static void ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(ADView *view, jint paddingBottom);

__attribute__((unused)) static void ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(ADXNavigationBarItemView *self, jfloat smallLabelSize, jfloat largeLabelSize);

__attribute__((unused)) static jboolean ADXNavigationBarItemView_hasBadge(ADXNavigationBarItemView *self);

__attribute__((unused)) static void ADXNavigationBarItemView_tryUpdateBadgeBoundsWithADView_(ADXNavigationBarItemView *self, ADView *anchorView);

__attribute__((unused)) static void ADXNavigationBarItemView_tryAttachBadgeToAnchorWithADView_(ADXNavigationBarItemView *self, ADView *anchorView);

__attribute__((unused)) static ADFrameLayout *ADXNavigationBarItemView_getCustomParentForBadgeWithADView_(ADXNavigationBarItemView *self, ADView *anchorView);

__attribute__((unused)) static jint ADXNavigationBarItemView_getSuggestedIconWidth(ADXNavigationBarItemView *self);

__attribute__((unused)) static jint ADXNavigationBarItemView_getSuggestedIconHeight(ADXNavigationBarItemView *self);

__attribute__((unused)) static jint ADXNavigationBarItemView_getTextSizeWithADTextView_(ADXNavigationBarItemView *self, ADTextView *label);

@interface ADXNavigationBarItemView_1 : NSObject < ADView_OnLayoutChangeListener > {
 @public
  ADXNavigationBarItemView *this$0_;
}

- (instancetype)initWithADXNavigationBarItemView:(ADXNavigationBarItemView *)outer$;

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNavigationBarItemView_1)

__attribute__((unused)) static void ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView_1 *self, ADXNavigationBarItemView *outer$);

__attribute__((unused)) static ADXNavigationBarItemView_1 *new_ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXNavigationBarItemView_1 *create_ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView *outer$);

J2OBJC_INITIALIZED_DEFN(ADXNavigationBarItemView)

@implementation ADXNavigationBarItemView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXNavigationBarItemView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initNavigationBarItemView {
  ADView *view = JreRetainedLocalValue([self inflateViewWithNSString:[self getItemLayoutResId]]);
  JreStrongAssign(&icon_, [((ADView *) nil_chk(view)) findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/navigation_bar_item_icon_view")]);
  JreStrongAssign(&labelGroup_, [view findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/navigation_bar_item_labels_group")]);
  JreStrongAssign(&smallLabel_, [view findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/navigation_bar_item_small_label_view")]);
  JreStrongAssign(&largeLabel_, [view findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/navigation_bar_item_large_label_view")]);
  defaultMargin_ = (jint) [self getItemDefaultMarginResId];
  [((ADViewGroup *) nil_chk(labelGroup_)) setTagWithInt:JreLoadStatic(ADR_id, mtrl_view_tag_bottom_padding) withId:JavaLangInteger_valueOfWithInt_([labelGroup_ getPaddingBottom])];
  ADXViewCompat_setImportantForAccessibilityWithADView_withInt_(smallLabel_, ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_NO);
  ADXViewCompat_setImportantForAccessibilityWithADView_withInt_(largeLabel_, ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_NO);
  [self setFocusableWithBoolean:true];
  ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(self, ADXNavigationBarItemView_getTextSizeWithADTextView_(self, smallLabel_), ADXNavigationBarItemView_getTextSizeWithADTextView_(self, largeLabel_));
  if (icon_ != nil) {
    [icon_ addOnLayoutChangeListenerWithADView_OnLayoutChangeListener:create_ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(self)];
  }
}

- (jint)getSuggestedMinimumWidth {
  ADFrameLayout_LayoutParams *labelGroupParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  jint labelWidth = ((ADFrameLayout_LayoutParams *) nil_chk(labelGroupParams))->leftMargin_ + [((ADViewGroup *) nil_chk(labelGroup_)) getMeasuredWidth] + labelGroupParams->rightMargin_;
  return JavaLangMath_maxWithInt_withInt_(ADXNavigationBarItemView_getSuggestedIconWidth(self), labelWidth);
}

- (jint)getSuggestedMinimumHeight {
  ADFrameLayout_LayoutParams *labelGroupParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  return ADXNavigationBarItemView_getSuggestedIconHeight(self) + ((ADFrameLayout_LayoutParams *) nil_chk(labelGroupParams))->topMargin_ + [((ADViewGroup *) nil_chk(labelGroup_)) getMeasuredHeight] + labelGroupParams->bottomMargin_;
}

- (void)initialize__WithADXMenuItemImpl:(ADXMenuItemImpl *)itemData
                                withInt:(jint)menuType {
  JreStrongAssign(&self->itemData_, itemData);
  [self setCheckableWithBoolean:[((ADXMenuItemImpl *) nil_chk(itemData)) isCheckable]];
  [self setCheckedWithBoolean:[itemData isChecked]];
  [self setEnabledWithBoolean:[itemData isEnabled]];
  [self setIconWithADDrawable:[itemData getIcon]];
  [self setTitleWithJavaLangCharSequence:[itemData getTitle]];
  [self setIdWithInt:[itemData getItemId]];
  if (!ADTextUtils_isEmptyWithNSString_(@"")) {
  }
  id<JavaLangCharSequence> tooltipText = !ADTextUtils_isEmptyWithJavaLangCharSequence_([itemData getTooltipText]) ? [itemData getTooltipText] : (id) [itemData getTitle];
  {
  }
  [self setVisibilityWithInt:[itemData isVisible] ? ADView_VISIBLE : ADView_GONE];
}

- (void)setItemPositionWithInt:(jint)position {
  itemPosition_ = position;
}

- (jint)getItemPosition {
  return itemPosition_;
}

- (void)setShiftingWithBoolean:(jboolean)shifting {
  if (isShifting_ != shifting) {
    isShifting_ = shifting;
    jboolean initialized = itemData_ != nil;
    if (initialized) {
      [self setCheckedWithBoolean:[((ADXMenuItemImpl *) nil_chk(itemData_)) isChecked]];
    }
  }
}

- (void)setLabelVisibilityModeWithInt:(jint)mode {
  if (labelVisibilityMode_ != mode) {
    labelVisibilityMode_ = mode;
    jboolean initialized = itemData_ != nil;
    if (initialized) {
      [self setCheckedWithBoolean:[((ADXMenuItemImpl *) nil_chk(itemData_)) isChecked]];
    }
  }
}

- (ADXMenuItemImpl *)getItemData {
  return itemData_;
}

- (void)setTitleWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  [((ADTextView *) nil_chk(smallLabel_)) setMyAttributeWithNSString:@"text" withId:title];
  [((ADTextView *) nil_chk(largeLabel_)) setMyAttributeWithNSString:@"text" withId:title];
  if (itemData_ == nil || ADTextUtils_isEmptyWithNSString_(@"")) {
  }
  id<JavaLangCharSequence> tooltipText = itemData_ == nil || ADTextUtils_isEmptyWithJavaLangCharSequence_([itemData_ getTooltipText]) ? title : [itemData_ getTooltipText];
  {
  }
}

- (void)setCheckableWithBoolean:(jboolean)checkable {
  [self refreshDrawableState];
}

- (void)setCheckedWithBoolean:(jboolean)checked {
  [((ADTextView *) nil_chk(largeLabel_)) setPivotXWithFloat:JreIntDiv([largeLabel_ getWidth], 2)];
  [((ADTextView *) nil_chk(largeLabel_)) setPivotYWithFloat:[largeLabel_ getBaseline]];
  [((ADTextView *) nil_chk(smallLabel_)) setPivotXWithFloat:JreIntDiv([smallLabel_ getWidth], 2)];
  [((ADTextView *) nil_chk(smallLabel_)) setPivotYWithFloat:[smallLabel_ getBaseline]];
  switch (labelVisibilityMode_) {
    case ADXNavigationBarView_LABEL_VISIBILITY_AUTO:
    if (isShifting_) {
      if (checked) {
        ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
        ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getTagWithInt:JreLoadStatic(ADR_id, mtrl_view_tag_bottom_padding)], [JavaLangInteger class]))) intValue]);
        [((ADTextView *) nil_chk(largeLabel_)) setVisibilityWithInt:ADView_VISIBLE];
      }
      else {
        ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER);
        ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, 0);
        [((ADTextView *) nil_chk(largeLabel_)) setVisibilityWithInt:ADView_INVISIBLE];
      }
      [((ADTextView *) nil_chk(smallLabel_)) setVisibilityWithInt:ADView_INVISIBLE];
    }
    else {
      ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getTagWithInt:JreLoadStatic(ADR_id, mtrl_view_tag_bottom_padding)], [JavaLangInteger class]))) intValue]);
      if (checked) {
        ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, JreFpToInt((defaultMargin_ + shiftAmount_)), ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
        ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(largeLabel_, 1.0f, 1.0f, ADView_VISIBLE);
        ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(smallLabel_, scaleUpFactor_, scaleUpFactor_, ADView_INVISIBLE);
      }
      else {
        ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
        ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(largeLabel_, scaleDownFactor_, scaleDownFactor_, ADView_INVISIBLE);
        ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(smallLabel_, 1.0f, 1.0f, ADView_VISIBLE);
      }
    }
    break;
    case ADXNavigationBarView_LABEL_VISIBILITY_SELECTED:
    if (checked) {
      ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
      ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getTagWithInt:JreLoadStatic(ADR_id, mtrl_view_tag_bottom_padding)], [JavaLangInteger class]))) intValue]);
      [((ADTextView *) nil_chk(largeLabel_)) setVisibilityWithInt:ADView_VISIBLE];
    }
    else {
      ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER);
      ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, 0);
      [((ADTextView *) nil_chk(largeLabel_)) setVisibilityWithInt:ADView_INVISIBLE];
    }
    [((ADTextView *) nil_chk(smallLabel_)) setVisibilityWithInt:ADView_INVISIBLE];
    break;
    case ADXNavigationBarView_LABEL_VISIBILITY_LABELED:
    ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(labelGroup_, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((ADViewGroup *) nil_chk(labelGroup_)) getTagWithInt:JreLoadStatic(ADR_id, mtrl_view_tag_bottom_padding)], [JavaLangInteger class]))) intValue]);
    if (checked) {
      ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, JreFpToInt((defaultMargin_ + shiftAmount_)), ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
      ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(largeLabel_, 1.0f, 1.0f, ADView_VISIBLE);
      ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(smallLabel_, scaleUpFactor_, scaleUpFactor_, ADView_INVISIBLE);
    }
    else {
      ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER_HORIZONTAL | ADGravity_TOP);
      ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(largeLabel_, scaleDownFactor_, scaleDownFactor_, ADView_INVISIBLE);
      ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(smallLabel_, 1.0f, 1.0f, ADView_VISIBLE);
    }
    break;
    case ADXNavigationBarView_LABEL_VISIBILITY_UNLABELED:
    ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(icon_, defaultMargin_, ADGravity_CENTER);
    [((ADTextView *) nil_chk(largeLabel_)) setVisibilityWithInt:ADView_GONE];
    [((ADTextView *) nil_chk(smallLabel_)) setVisibilityWithInt:ADView_GONE];
    break;
    default:
    break;
  }
  [self refreshDrawableState];
  [self setSelectedWithBoolean:checked];
}

- (jint)getItemVisiblePosition {
  return ADXNavigationBarItemView_getItemVisiblePosition(self);
}

+ (void)setViewLayoutParamsWithADView:(ADView *)view
                              withInt:(jint)topMargin
                              withInt:(jint)gravity {
  ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(view, topMargin, gravity);
}

+ (void)setViewScaleValuesWithADView:(ADView *)view
                           withFloat:(jfloat)scaleX
                           withFloat:(jfloat)scaleY
                             withInt:(jint)visibility {
  ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(view, scaleX, scaleY, visibility);
}

+ (void)updateViewPaddingBottomWithADView:(ADView *)view
                                  withInt:(jint)paddingBottom {
  ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(view, paddingBottom);
}

- (void)setEnabledWithBoolean:(jboolean)enabled {
  [super setEnabledWithBoolean:enabled];
  [((ADTextView *) nil_chk(smallLabel_)) setEnabledWithBoolean:enabled];
  [((ADTextView *) nil_chk(largeLabel_)) setEnabledWithBoolean:enabled];
  [((ADImageView *) nil_chk(icon_)) setEnabledWithBoolean:enabled];
  if (enabled) {
  }
  else {
  }
}

- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace {
  IOSIntArray *drawableState = [super onCreateDrawableStateWithInt:extraSpace + 1];
  if (itemData_ != nil && [itemData_ isCheckable] && [((ADXMenuItemImpl *) nil_chk(itemData_)) isChecked]) {
    ADView_mergeDrawableStatesWithIntArray_withIntArray_(drawableState, ADXNavigationBarItemView_CHECKED_STATE_SET);
  }
  return drawableState;
}

- (void)setIconWithADDrawable:(ADDrawable *)iconDrawable {
  if (iconDrawable == originalIconDrawable_) {
    return;
  }
  JreStrongAssign(&originalIconDrawable_, iconDrawable);
  if (iconDrawable != nil) {
  }
  [((ADImageView *) nil_chk(self->icon_)) setMyAttributeWithNSString:@"src" withId:iconDrawable];
}

- (void)setIconSizeWithInt:(jint)iconSize {
  ADFrameLayout_LayoutParams *iconParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADImageView *) nil_chk(icon_)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  ((ADFrameLayout_LayoutParams *) nil_chk(iconParams))->width_ = iconSize;
  iconParams->height_ = iconSize;
  [((ADImageView *) nil_chk(icon_)) setLayoutParamsWithADViewGroup_LayoutParams:iconParams];
}

- (void)setTextAppearanceInactiveWithNSString:(NSString *)inactiveTextAppearance {
  [((ADTextView *) nil_chk(smallLabel_)) setMyAttributeWithNSString:@"textAppearance" withId:inactiveTextAppearance];
  ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(self, ADXNavigationBarItemView_getTextSizeWithADTextView_(self, smallLabel_), ADXNavigationBarItemView_getTextSizeWithADTextView_(self, largeLabel_));
}

- (void)setTextAppearanceActiveWithNSString:(NSString *)activeTextAppearance {
  [((ADTextView *) nil_chk(largeLabel_)) setMyAttributeWithNSString:@"textAppearance" withId:activeTextAppearance];
  ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(self, ADXNavigationBarItemView_getTextSizeWithADTextView_(self, smallLabel_), ADXNavigationBarItemView_getTextSizeWithADTextView_(self, largeLabel_));
}

- (void)setTextColorWithADColorStateList:(ADColorStateList *)color {
  if (color != nil) {
    [((ADTextView *) nil_chk(smallLabel_)) setMyAttributeWithNSString:@"textColor" withId:color];
    [((ADTextView *) nil_chk(largeLabel_)) setMyAttributeWithNSString:@"textColor" withId:color];
  }
}

- (void)calculateTextScaleFactorsWithFloat:(jfloat)smallLabelSize
                                 withFloat:(jfloat)largeLabelSize {
  ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(self, smallLabelSize, largeLabelSize);
}

- (void)setBadgeWithADXBadgeDrawable:(ADXBadgeDrawable *)badgeDrawable {
  JreStrongAssign(&self->badgeDrawable_, badgeDrawable);
  if (icon_ != nil) {
    ADXNavigationBarItemView_tryAttachBadgeToAnchorWithADView_(self, icon_);
  }
}

- (jboolean)hasBadge {
  return ADXNavigationBarItemView_hasBadge(self);
}

- (void)tryUpdateBadgeBoundsWithADView:(ADView *)anchorView {
  ADXNavigationBarItemView_tryUpdateBadgeBoundsWithADView_(self, anchorView);
}

- (void)tryAttachBadgeToAnchorWithADView:(ADView *)anchorView {
  ADXNavigationBarItemView_tryAttachBadgeToAnchorWithADView_(self, anchorView);
}

- (ADFrameLayout *)getCustomParentForBadgeWithADView:(ADView *)anchorView {
  return ADXNavigationBarItemView_getCustomParentForBadgeWithADView_(self, anchorView);
}

- (jint)getSuggestedIconWidth {
  return ADXNavigationBarItemView_getSuggestedIconWidth(self);
}

- (jint)getSuggestedIconHeight {
  return ADXNavigationBarItemView_getSuggestedIconHeight(self);
}

- (jint)getItemDefaultMarginResId {
  return JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"8dp"));
}

- (NSString *)getItemLayoutResId {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setItemBackgroundWithADDrawable:(ADDrawable *)background {
  [((ADView *) nil_chk([self getChildAtWithInt:0])) setMyAttributeWithNSString:@"background" withId:background];
}

- (void)setIconTintListWithADColorStateList:(ADColorStateList *)tint {
  [((ADImageView *) nil_chk(icon_)) setMyAttributeWithNSString:@"tint" withId:tint];
}

- (jint)getTextSizeWithADTextView:(ADTextView *)label {
  return ADXNavigationBarItemView_getTextSizeWithADTextView_(self, label);
}

- (void)requestLayout {
  [super requestLayout];
  if (icon_ != nil) {
    [icon_ requestLayout];
  }
}

- (void)dealloc {
  RELEASE_(icon_);
  RELEASE_(labelGroup_);
  RELEASE_(smallLabel_);
  RELEASE_(largeLabel_);
  RELEASE_(itemData_);
  RELEASE_(originalIconDrawable_);
  RELEASE_(badgeDrawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LADXMenuItemImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 32, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout;", 0x2, 34, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initNavigationBarItemView);
  methods[2].selector = @selector(getSuggestedMinimumWidth);
  methods[3].selector = @selector(getSuggestedMinimumHeight);
  methods[4].selector = @selector(initialize__WithADXMenuItemImpl:withInt:);
  methods[5].selector = @selector(setItemPositionWithInt:);
  methods[6].selector = @selector(getItemPosition);
  methods[7].selector = @selector(setShiftingWithBoolean:);
  methods[8].selector = @selector(setLabelVisibilityModeWithInt:);
  methods[9].selector = @selector(getItemData);
  methods[10].selector = @selector(setTitleWithJavaLangCharSequence:);
  methods[11].selector = @selector(setCheckableWithBoolean:);
  methods[12].selector = @selector(setCheckedWithBoolean:);
  methods[13].selector = @selector(getItemVisiblePosition);
  methods[14].selector = @selector(setViewLayoutParamsWithADView:withInt:withInt:);
  methods[15].selector = @selector(setViewScaleValuesWithADView:withFloat:withFloat:withInt:);
  methods[16].selector = @selector(updateViewPaddingBottomWithADView:withInt:);
  methods[17].selector = @selector(setEnabledWithBoolean:);
  methods[18].selector = @selector(onCreateDrawableStateWithInt:);
  methods[19].selector = @selector(setIconWithADDrawable:);
  methods[20].selector = @selector(setIconSizeWithInt:);
  methods[21].selector = @selector(setTextAppearanceInactiveWithNSString:);
  methods[22].selector = @selector(setTextAppearanceActiveWithNSString:);
  methods[23].selector = @selector(setTextColorWithADColorStateList:);
  methods[24].selector = @selector(calculateTextScaleFactorsWithFloat:withFloat:);
  methods[25].selector = @selector(setBadgeWithADXBadgeDrawable:);
  methods[26].selector = @selector(hasBadge);
  methods[27].selector = @selector(tryUpdateBadgeBoundsWithADView:);
  methods[28].selector = @selector(tryAttachBadgeToAnchorWithADView:);
  methods[29].selector = @selector(getCustomParentForBadgeWithADView:);
  methods[30].selector = @selector(getSuggestedIconWidth);
  methods[31].selector = @selector(getSuggestedIconHeight);
  methods[32].selector = @selector(getItemDefaultMarginResId);
  methods[33].selector = @selector(getItemLayoutResId);
  methods[34].selector = @selector(setItemBackgroundWithADDrawable:);
  methods[35].selector = @selector(setIconTintListWithADColorStateList:);
  methods[36].selector = @selector(getTextSizeWithADTextView:);
  methods[37].selector = @selector(requestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_ITEM_POSITION", "I", .constantValue.asInt = ADXNavigationBarItemView_INVALID_ITEM_POSITION, 0x1a, -1, -1, -1, -1 },
    { "CHECKED_STATE_SET", "[I", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "defaultMargin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shiftAmount_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleUpFactor_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleDownFactor_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "labelVisibilityMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isShifting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "icon_", "LADImageView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "labelGroup_", "LADViewGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "smallLabel_", "LADTextView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "largeLabel_", "LADTextView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemData_", "LADXMenuItemImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalIconDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeDrawable_", "LADXBadgeDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LADXMenuItemImpl;I", "setItemPosition", "I", "setShifting", "Z", "setLabelVisibilityMode", "setTitle", "LJavaLangCharSequence;", "setCheckable", "setChecked", "setViewLayoutParams", "LADView;II", "setViewScaleValues", "LADView;FFI", "updateViewPaddingBottom", "LADView;I", "setEnabled", "onCreateDrawableState", "setIcon", "LADDrawable;", "setIconSize", "setTextAppearanceInactive", "LNSString;", "setTextAppearanceActive", "setTextColor", "LADColorStateList;", "calculateTextScaleFactors", "FF", "setBadge", "LADXBadgeDrawable;", "tryUpdateBadgeBounds", "LADView;", "tryAttachBadgeToAnchor", "getCustomParentForBadge", "setItemBackground", "setIconTintList", "getTextSize", "LADTextView;", &ADXNavigationBarItemView_CHECKED_STATE_SET };
  static const J2ObjcClassInfo _ADXNavigationBarItemView = { "NavigationBarItemView", "com.google.android.material.navigation", ptrTable, methods, fields, 7, 0x401, 38, 16, -1, -1, -1, -1, -1 };
  return &_ADXNavigationBarItemView;
}

+ (void)initialize {
  if (self == [ADXNavigationBarItemView class]) {
    JreStrongAssignAndConsume(&ADXNavigationBarItemView_CHECKED_STATE_SET, [IOSIntArray newArrayWithInts:(jint[]){ ADR_attr_state_checked } count:1]);
    J2OBJC_SET_INITIALIZED(ADXNavigationBarItemView)
  }
}

@end

void ADXNavigationBarItemView_init(ADXNavigationBarItemView *self) {
  ADFrameLayout_init(self);
  self->itemPosition_ = ADXNavigationBarItemView_INVALID_ITEM_POSITION;
}

jint ADXNavigationBarItemView_getItemVisiblePosition(ADXNavigationBarItemView *self) {
  ADViewGroup *parent = (ADViewGroup *) cast_chk([self getParent], [ADViewGroup class]);
  jint index = [((ADViewGroup *) nil_chk(parent)) indexOfChildWithADView:self];
  jint visiblePosition = 0;
  for (jint i = 0; i < index; i++) {
    ADView *child = JreRetainedLocalValue([parent getChildAtWithInt:i]);
    if ([child isKindOfClass:[ADXNavigationBarItemView class]] && [((ADView *) nil_chk(child)) getVisibility] == ADView_VISIBLE) {
      visiblePosition++;
    }
  }
  return visiblePosition;
}

void ADXNavigationBarItemView_setViewLayoutParamsWithADView_withInt_withInt_(ADView *view, jint topMargin, jint gravity) {
  ADXNavigationBarItemView_initialize();
  ADFrameLayout_LayoutParams *viewParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  ((ADFrameLayout_LayoutParams *) nil_chk(viewParams))->topMargin_ = topMargin;
  viewParams->gravity_ = gravity;
  [view setLayoutParamsWithADViewGroup_LayoutParams:viewParams];
}

void ADXNavigationBarItemView_setViewScaleValuesWithADView_withFloat_withFloat_withInt_(ADView *view, jfloat scaleX, jfloat scaleY, jint visibility) {
  ADXNavigationBarItemView_initialize();
  [((ADView *) nil_chk(view)) setScaleXWithFloat:scaleX];
  [view setScaleYWithFloat:scaleY];
  [view setVisibilityWithInt:visibility];
}

void ADXNavigationBarItemView_updateViewPaddingBottomWithADView_withInt_(ADView *view, jint paddingBottom) {
  ADXNavigationBarItemView_initialize();
  [((ADView *) nil_chk(view)) setPaddingWithInt:[view getPaddingLeft] withInt:[view getPaddingTop] withInt:[view getPaddingRight] withInt:paddingBottom];
}

void ADXNavigationBarItemView_calculateTextScaleFactorsWithFloat_withFloat_(ADXNavigationBarItemView *self, jfloat smallLabelSize, jfloat largeLabelSize) {
  self->shiftAmount_ = smallLabelSize - largeLabelSize;
  self->scaleUpFactor_ = 1.0f * largeLabelSize / smallLabelSize;
  self->scaleDownFactor_ = 1.0f * smallLabelSize / largeLabelSize;
}

jboolean ADXNavigationBarItemView_hasBadge(ADXNavigationBarItemView *self) {
  return self->badgeDrawable_ != nil;
}

void ADXNavigationBarItemView_tryUpdateBadgeBoundsWithADView_(ADXNavigationBarItemView *self, ADView *anchorView) {
  if (!ADXNavigationBarItemView_hasBadge(self)) {
    return;
  }
  ADXBadgeUtils_setBadgeDrawableBoundsWithADXBadgeDrawable_withADView_withADFrameLayout_(self->badgeDrawable_, anchorView, ADXNavigationBarItemView_getCustomParentForBadgeWithADView_(self, anchorView));
}

void ADXNavigationBarItemView_tryAttachBadgeToAnchorWithADView_(ADXNavigationBarItemView *self, ADView *anchorView) {
  if (!ADXNavigationBarItemView_hasBadge(self)) {
    return;
  }
  if (anchorView != nil) {
    [self setMyAttributeWithNSString:@"clipChildren" withId:JavaLangBoolean_valueOfWithBoolean_(false)];
    [self setClipToPaddingWithBoolean:false];
    ADXBadgeUtils_attachBadgeDrawableWithADXBadgeDrawable_withADView_withADFrameLayout_(self->badgeDrawable_, anchorView, ADXNavigationBarItemView_getCustomParentForBadgeWithADView_(self, anchorView));
  }
}

ADFrameLayout *ADXNavigationBarItemView_getCustomParentForBadgeWithADView_(ADXNavigationBarItemView *self, ADView *anchorView) {
  if (anchorView == self->icon_) {
    return nil;
  }
  return nil;
}

jint ADXNavigationBarItemView_getSuggestedIconWidth(ADXNavigationBarItemView *self) {
  jint badgeWidth = self->badgeDrawable_ == nil ? 0 : [self->badgeDrawable_ getMinimumWidth] - [((ADXBadgeDrawable *) nil_chk(self->badgeDrawable_)) getHorizontalOffset];
  ADFrameLayout_LayoutParams *iconParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADImageView *) nil_chk(self->icon_)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  return JavaLangMath_maxWithInt_withInt_(badgeWidth, ((ADFrameLayout_LayoutParams *) nil_chk(iconParams))->leftMargin_) + [((ADImageView *) nil_chk(self->icon_)) getMeasuredWidth] + JavaLangMath_maxWithInt_withInt_(badgeWidth, iconParams->rightMargin_);
}

jint ADXNavigationBarItemView_getSuggestedIconHeight(ADXNavigationBarItemView *self) {
  jint badgeHeight = 0;
  if (self->badgeDrawable_ != nil) {
    badgeHeight = JreIntDiv([self->badgeDrawable_ getMinimumHeight], 2);
  }
  ADFrameLayout_LayoutParams *iconParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADImageView *) nil_chk(self->icon_)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  return JavaLangMath_maxWithInt_withInt_(badgeHeight, ((ADFrameLayout_LayoutParams *) nil_chk(iconParams))->topMargin_) + [((ADImageView *) nil_chk(self->icon_)) getMeasuredWidth] + badgeHeight;
}

jint ADXNavigationBarItemView_getTextSizeWithADTextView_(ADXNavigationBarItemView *self, ADTextView *label) {
  NSNumber *number = (NSNumber *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASILifeCycleDecorator>) nil_chk(((id<ASILifeCycleDecorator>) cast_check(label, ASILifeCycleDecorator_class_())))) getWidget])) getAttributeWithNSString:@"textSize" withBoolean:true], [NSNumber class]);
  if (number != nil) {
    return [number intValue];
  }
  else {
    return 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNavigationBarItemView)

@implementation ADXNavigationBarItemView_1

- (instancetype)initWithADXNavigationBarItemView:(ADXNavigationBarItemView *)outer$ {
  ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(self, outer$);
  return self;
}

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom {
  if ([((ADImageView *) nil_chk(this$0_->icon_)) getVisibility] == ADView_VISIBLE) {
    ADXNavigationBarItemView_tryUpdateBadgeBoundsWithADView_(this$0_, this$0_->icon_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXNavigationBarItemView:);
  methods[1].selector = @selector(onLayoutChangeWithADView:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXNavigationBarItemView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXNavigationBarItemView;", "onLayoutChange", "LADView;IIIIIIII", "initNavigationBarItemView" };
  static const J2ObjcClassInfo _ADXNavigationBarItemView_1 = { "", "com.google.android.material.navigation", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADXNavigationBarItemView_1;
}

@end

void ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView_1 *self, ADXNavigationBarItemView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXNavigationBarItemView_1 *new_ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView *outer$) {
  J2OBJC_NEW_IMPL(ADXNavigationBarItemView_1, initWithADXNavigationBarItemView_, outer$)
}

ADXNavigationBarItemView_1 *create_ADXNavigationBarItemView_1_initWithADXNavigationBarItemView_(ADXNavigationBarItemView *outer$) {
  J2OBJC_CREATE_IMPL(ADXNavigationBarItemView_1, initWithADXNavigationBarItemView_, outer$)
}
