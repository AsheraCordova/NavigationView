//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\internal\BaselineLayout.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BaselineLayout.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXBaselineLayout () {
 @public
  int32_t baseline_;
  bool measurePaddingFromBaseline_;
}

@end

@implementation ADXBaselineLayout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXBaselineLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setMeasurePaddingFromBaselineWithBoolean:(bool)measurePaddingFromBaseline {
  self->measurePaddingFromBaseline_ = measurePaddingFromBaseline;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  int32_t count = [self getChildCount];
  int32_t maxWidth = 0;
  int32_t maxHeight = 0;
  int32_t maxChildBaseline = -1;
  int32_t maxChildDescent = -1;
  int32_t maxMeasuredHeight = 0;
  int32_t childState = 0;
  for (int32_t i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    [self measureChildWithADView:child withInt:widthMeasureSpec withInt:heightMeasureSpec];
    maxMeasuredHeight = JavaLangMath_maxWithInt_withInt_(maxMeasuredHeight, [child getMeasuredHeight]);
    int32_t baseline = [child getBaseline];
    if (baseline != -1) {
      maxChildBaseline = JavaLangMath_maxWithInt_withInt_(maxChildBaseline, baseline);
      maxChildDescent = JavaLangMath_maxWithInt_withInt_(maxChildDescent, [child getMeasuredHeight] - baseline);
    }
    maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [child getMeasuredWidth]);
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [child getMeasuredHeight]);
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
  }
  if (maxChildBaseline != -1) {
    if (measurePaddingFromBaseline_) {
      maxChildDescent = JavaLangMath_maxWithInt_withInt_(maxChildDescent, [self getPaddingBottom]);
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, maxChildBaseline + maxChildDescent);
    }
    self->baseline_ = maxChildBaseline;
  }
  maxHeight = JavaLangMath_maxWithInt_withInt_(measurePaddingFromBaseline_ ? maxHeight : maxMeasuredHeight + [self getPaddingBottom], [self getSuggestedMinimumHeight]);
  maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [self getSuggestedMinimumWidth]);
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxWidth, widthMeasureSpec, childState) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxHeight, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT))];
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)left
                    withInt:(int32_t)top
                    withInt:(int32_t)right
                    withInt:(int32_t)bottom {
  int32_t count = [self getChildCount];
  int32_t parentLeft = [self getPaddingLeft];
  int32_t parentRight = right - left - [self getPaddingRight];
  int32_t parentContentWidth = parentRight - parentLeft;
  int32_t parentTop = [self getPaddingTop];
  for (int32_t i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    int32_t width = [child getMeasuredWidth];
    int32_t height = [child getMeasuredHeight];
    int32_t childLeft = parentLeft + JreIntDiv((parentContentWidth - width), 2);
    int32_t childTop;
    if (baseline_ != -1 && [child getBaseline] != -1) {
      childTop = parentTop + baseline_ - [child getBaseline];
    }
    else {
      childTop = parentTop;
    }
    [child layoutWithInt:childLeft withInt:childTop withInt:childLeft + width withInt:childTop + height];
  }
}

- (int32_t)getBaseline {
  return baseline_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setMeasurePaddingFromBaselineWithBoolean:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getBaseline);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "baseline_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "measurePaddingFromBaseline_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMeasurePaddingFromBaseline", "Z", "onMeasure", "II", "onLayout", "ZIIII" };
  static const J2ObjcClassInfo _ADXBaselineLayout = { "BaselineLayout", "com.google.android.material.internal", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ADXBaselineLayout;
}

@end

void ADXBaselineLayout_init(ADXBaselineLayout *self) {
  ADViewGroup_init(self);
  self->baseline_ = -1;
}

ADXBaselineLayout *new_ADXBaselineLayout_init() {
  J2OBJC_NEW_IMPL(ADXBaselineLayout, init)
}

ADXBaselineLayout *create_ADXBaselineLayout_init() {
  J2OBJC_CREATE_IMPL(ADXBaselineLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBaselineLayout)

J2OBJC_NAME_MAPPING(ADXBaselineLayout, "com.google.android.material.internal", "ADX")
