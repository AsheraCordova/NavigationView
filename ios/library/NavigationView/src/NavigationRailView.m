//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\navigationrail\NavigationRailView.java
//

#include "Context.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "NavigationBarMenuView.h"
#include "NavigationBarView.h"
#include "NavigationRailMenuView.h"
#include "NavigationRailView.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewGroup.h"
#include "WidgetFactory.h"
#include "java/lang/Math.h"


@interface ADXNavigationRailView () {
 @public
  jint topMargin_;
  ADView *headerView_;
}

- (ADXNavigationRailMenuView *)getNavigationRailMenuView;

- (jint)makeMinWidthSpecWithInt:(jint)measureSpec;

- (jboolean)isHeaderViewVisible;

@end

J2OBJC_FIELD_SETTER(ADXNavigationRailView, headerView_, ADView *)

inline jint ADXNavigationRailView_get_DEFAULT_HEADER_GRAVITY(void);
#define ADXNavigationRailView_DEFAULT_HEADER_GRAVITY 49
J2OBJC_STATIC_FIELD_CONSTANT(ADXNavigationRailView, DEFAULT_HEADER_GRAVITY, jint)

__attribute__((unused)) static ADXNavigationRailMenuView *ADXNavigationRailView_getNavigationRailMenuView(ADXNavigationRailView *self);

__attribute__((unused)) static jint ADXNavigationRailView_makeMinWidthSpecWithInt_(ADXNavigationRailView *self, jint measureSpec);

__attribute__((unused)) static jboolean ADXNavigationRailView_isHeaderViewVisible(ADXNavigationRailView *self);

@implementation ADXNavigationRailView

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint minWidthSpec = ADXNavigationRailView_makeMinWidthSpecWithInt_(self, widthMeasureSpec);
  [super onMeasureWithInt:minWidthSpec withInt:heightMeasureSpec];
  if (ADXNavigationRailView_isHeaderViewVisible(self)) {
    jint maxMenuHeight = [self getMeasuredHeight] - [((ADView *) nil_chk(headerView_)) getMeasuredHeight] - topMargin_;
    jint menuHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxMenuHeight, ADView_MeasureSpec_AT_MOST);
    [self measureChildWithADView:ADXNavigationRailView_getNavigationRailMenuView(self) withInt:minWidthSpec withInt:menuHeightSpec];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  [super onLayoutWithBoolean:changed withInt:left withInt:top withInt:right withInt:bottom];
  ADXNavigationRailMenuView *menuView = ADXNavigationRailView_getNavigationRailMenuView(self);
  jint offsetY = 0;
  if (ADXNavigationRailView_isHeaderViewVisible(self)) {
    jint usedTop = [((ADView *) nil_chk(headerView_)) getBottom] + topMargin_;
    jint menuTop = [((ADXNavigationRailMenuView *) nil_chk(menuView)) getTop];
    if (menuTop < usedTop) {
      offsetY = usedTop - menuTop;
    }
  }
  else if ([((ADXNavigationRailMenuView *) nil_chk(menuView)) isTopGravity]) {
    offsetY = topMargin_;
  }
  if (offsetY > 0) {
    [menuView layoutWithInt:[menuView getLeft] withInt:[menuView getTop] + offsetY withInt:[menuView getRight] withInt:[menuView getBottom] + offsetY];
  }
}

- (void)addHeaderViewWithADView:(ADView *)headerView {
  [self removeHeaderView];
  JreStrongAssign(&self->headerView_, headerView);
  ADFrameLayout_LayoutParams *params = create_ADFrameLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  params->gravity_ = ADXNavigationRailView_DEFAULT_HEADER_GRAVITY;
  params->topMargin_ = topMargin_;
  [((ADView *) nil_chk(headerView)) setLayoutParamsWithADViewGroup_LayoutParams:params];
  [self addViewWithADView:headerView withInt:0 withADViewGroup_LayoutParams:params];
}

- (ADView *)getHeaderView {
  return headerView_;
}

- (void)removeHeaderView {
  if (headerView_ != nil) {
    [self removeViewWithADView:headerView_];
    JreStrongAssign(&headerView_, nil);
  }
}

- (void)setMenuGravityWithInt:(jint)gravity {
  [((ADXNavigationRailMenuView *) nil_chk(ADXNavigationRailView_getNavigationRailMenuView(self))) setMenuGravityWithInt:gravity];
}

- (jint)getMenuGravity {
  return [((ADXNavigationRailMenuView *) nil_chk(ADXNavigationRailView_getNavigationRailMenuView(self))) getMenuGravity];
}

- (jint)getMaxItemCount {
  return ADXNavigationRailView_MAX_ITEM_COUNT;
}

- (ADXNavigationRailMenuView *)getNavigationRailMenuView {
  return ADXNavigationRailView_getNavigationRailMenuView(self);
}

- (ADXNavigationRailMenuView *)createNavigationBarMenuViewWithADContext:(ADContext *)context {
  NSString *name = [ADXNavigationRailMenuView_class_() getName];
  id<ASIWidget> widget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(name, name, (id<ASHasWidgets>) cast_check([((id<ASILifeCycleDecorator>) cast_check(self, ASILifeCycleDecorator_class_())) getWidget], ASHasWidgets_class_()), false);
  return (ADXNavigationRailMenuView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADXNavigationRailMenuView class]);
}

- (jint)makeMinWidthSpecWithInt:(jint)measureSpec {
  return ADXNavigationRailView_makeMinWidthSpecWithInt_(self, measureSpec);
}

- (jboolean)isHeaderViewVisible {
  return ADXNavigationRailView_isHeaderViewVisible(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXNavigationRailView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initNavigationBarView {
  [super initNavigationBarView];
  [self setMenuGravityWithInt:ADXNavigationRailView_DEFAULT_MENU_GRAVITY];
  [self setMinimumWidthWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"72dp"))];
}

- (void)dealloc {
  RELEASE_(headerView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXNavigationRailMenuView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXNavigationRailMenuView;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onMeasureWithInt:withInt:);
  methods[1].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(addHeaderViewWithADView:);
  methods[3].selector = @selector(getHeaderView);
  methods[4].selector = @selector(removeHeaderView);
  methods[5].selector = @selector(setMenuGravityWithInt:);
  methods[6].selector = @selector(getMenuGravity);
  methods[7].selector = @selector(getMaxItemCount);
  methods[8].selector = @selector(getNavigationRailMenuView);
  methods[9].selector = @selector(createNavigationBarMenuViewWithADContext:);
  methods[10].selector = @selector(makeMinWidthSpecWithInt:);
  methods[11].selector = @selector(isHeaderViewVisible);
  methods[12].selector = @selector(init);
  methods[13].selector = @selector(initNavigationBarView);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MENU_GRAVITY", "I", .constantValue.asInt = ADXNavigationRailView_DEFAULT_MENU_GRAVITY, 0x18, -1, -1, -1, -1 },
    { "MAX_ITEM_COUNT", "I", .constantValue.asInt = ADXNavigationRailView_MAX_ITEM_COUNT, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_HEADER_GRAVITY", "I", .constantValue.asInt = ADXNavigationRailView_DEFAULT_HEADER_GRAVITY, 0x1a, -1, -1, -1, -1 },
    { "topMargin_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "headerView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onMeasure", "II", "onLayout", "ZIIII", "addHeaderView", "LADView;", "setMenuGravity", "I", "createNavigationBarMenuView", "LADContext;", "makeMinWidthSpec" };
  static const J2ObjcClassInfo _ADXNavigationRailView = { "NavigationRailView", "com.google.android.material.navigationrail", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_ADXNavigationRailView;
}

@end

ADXNavigationRailMenuView *ADXNavigationRailView_getNavigationRailMenuView(ADXNavigationRailView *self) {
  return (ADXNavigationRailMenuView *) cast_chk([self getMenuView], [ADXNavigationRailMenuView class]);
}

jint ADXNavigationRailView_makeMinWidthSpecWithInt_(ADXNavigationRailView *self, jint measureSpec) {
  jint minWidth = [self getSuggestedMinimumWidth];
  if (ADView_MeasureSpec_getModeWithInt_(measureSpec) != ADView_MeasureSpec_EXACTLY && minWidth > 0) {
    minWidth += [self getPaddingLeft] + [self getPaddingRight];
    return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_minWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(measureSpec), minWidth), ADView_MeasureSpec_EXACTLY);
  }
  return measureSpec;
}

jboolean ADXNavigationRailView_isHeaderViewVisible(ADXNavigationRailView *self) {
  return self->headerView_ != nil && [self->headerView_ getVisibility] != ADView_GONE;
}

void ADXNavigationRailView_init(ADXNavigationRailView *self) {
  ADXNavigationBarView_init(self);
  self->topMargin_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"8dp"));
}

ADXNavigationRailView *new_ADXNavigationRailView_init() {
  J2OBJC_NEW_IMPL(ADXNavigationRailView, init)
}

ADXNavigationRailView *create_ADXNavigationRailView_init() {
  J2OBJC_CREATE_IMPL(ADXNavigationRailView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNavigationRailView)
