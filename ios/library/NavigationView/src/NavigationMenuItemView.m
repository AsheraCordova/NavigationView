//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\internal\NavigationMenuItemView.java
//

#include "ColorStateList.h"
#include "Drawable.h"
#include "ForegroundLinearLayout.h"
#include "FrameLayout.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "MenuItemImpl.h"
#include "NavigationMenuItemView.h"
#include "PluginInvoker.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"


@interface ADXNavigationMenuItemView () {
 @public
  jint iconSize_;
  jboolean needsEmptyIcon_;
  ADTextView *textView_;
  ADFrameLayout *actionArea_;
  ADXMenuItemImpl *itemData_;
  ADColorStateList *iconTintList_;
  jboolean hasIconTintList_;
  ADDrawable *emptyDrawable_;
}

- (jboolean)shouldExpandActionArea;

- (void)adjustAppearance;

- (void)setActionViewWithADView:(ADView *)actionView;

@end

J2OBJC_FIELD_SETTER(ADXNavigationMenuItemView, textView_, ADTextView *)
J2OBJC_FIELD_SETTER(ADXNavigationMenuItemView, actionArea_, ADFrameLayout *)
J2OBJC_FIELD_SETTER(ADXNavigationMenuItemView, itemData_, ADXMenuItemImpl *)
J2OBJC_FIELD_SETTER(ADXNavigationMenuItemView, iconTintList_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADXNavigationMenuItemView, emptyDrawable_, ADDrawable *)

__attribute__((unused)) static jboolean ADXNavigationMenuItemView_shouldExpandActionArea(ADXNavigationMenuItemView *self);

__attribute__((unused)) static void ADXNavigationMenuItemView_adjustAppearance(ADXNavigationMenuItemView *self);

__attribute__((unused)) static void ADXNavigationMenuItemView_setActionViewWithADView_(ADXNavigationMenuItemView *self, ADView *actionView);

@implementation ADXNavigationMenuItemView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXNavigationMenuItemView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithADXMenuItemImpl:(ADXMenuItemImpl *)itemData
                                withInt:(jint)menuType {
  JreStrongAssign(&self->itemData_, itemData);
  if ([((ADXMenuItemImpl *) nil_chk(itemData)) getItemId] > 0) {
    [self setIdWithInt:[itemData getItemId]];
  }
  [self setVisibilityWithInt:[itemData isVisible] ? ADView_VISIBLE : ADView_GONE];
  if ([self getBackground] == nil) {
  }
  [self setCheckableWithBoolean:[itemData isCheckable]];
  [self setCheckedWithBoolean:[itemData isChecked]];
  [self setEnabledWithBoolean:[itemData isEnabled]];
  [self setTitleWithJavaLangCharSequence:[itemData getTitle]];
  [self setIconWithADDrawable:[itemData getIcon]];
  ADXNavigationMenuItemView_setActionViewWithADView_(self, [itemData getActionView]);
  ADXNavigationMenuItemView_adjustAppearance(self);
}

- (void)initialize__WithADXMenuItemImpl:(ADXMenuItemImpl *)itemData
                            withBoolean:(jboolean)isBold {
  self->isBold_ = isBold;
  [self initialize__WithADXMenuItemImpl:itemData withInt:0];
}

- (jboolean)shouldExpandActionArea {
  return ADXNavigationMenuItemView_shouldExpandActionArea(self);
}

- (void)adjustAppearance {
  ADXNavigationMenuItemView_adjustAppearance(self);
}

- (void)recycle {
  if (actionArea_ != nil) {
    [actionArea_ removeAllViews];
  }
}

- (void)setActionViewWithADView:(ADView *)actionView {
  ADXNavigationMenuItemView_setActionViewWithADView_(self, actionView);
}

- (ADXMenuItemImpl *)getItemData {
  return itemData_;
}

- (void)setTitleWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"text" withId:title];
}

- (void)setCheckableWithBoolean:(jboolean)checkable {
  [self refreshDrawableState];
  if (self->checkable_ != checkable) {
    self->checkable_ = checkable;
  }
}

- (void)setCheckedWithBoolean:(jboolean)checked {
  [self refreshDrawableState];
}

- (void)setIconWithADDrawable:(ADDrawable *)icon {
  if (icon != nil) {
    [icon setRecycleableWithBoolean:true];
    if (hasIconTintList_) {
      [icon setTintColorWithId:iconTintList_];
    }
    [icon setBoundsWithInt:0 withInt:0 withInt:iconSize_ withInt:iconSize_];
    [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"drawableIconSize" withId:JavaLangInteger_valueOfWithInt_(iconSize_)];
  }
  else if (needsEmptyIcon_) {
    if (emptyDrawable_ == nil) {
      if (emptyDrawable_ != nil) {
        [emptyDrawable_ setBoundsWithInt:0 withInt:0 withInt:iconSize_ withInt:iconSize_];
      }
    }
    icon = emptyDrawable_;
  }
  if (icon != nil) {
    [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"drawableStart" withId:icon];
    [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"drawableTint" withId:iconTintList_];
  }
}

- (void)setIconSizeWithInt:(jint)iconSize {
  self->iconSize_ = iconSize;
}

- (void)setIconTintListWithADColorStateList:(ADColorStateList *)tintList {
  JreStrongAssign(&iconTintList_, tintList);
  hasIconTintList_ = (iconTintList_ != nil);
  if (itemData_ != nil) {
    [self setIconWithADDrawable:[itemData_ getIcon]];
  }
}

- (void)setTextAppearanceWithNSString:(NSString *)textAppearance {
  [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"textAppearance" withId:textAppearance];
}

- (void)setTextColorWithADColorStateList:(ADColorStateList *)colors {
  [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"textColor" withId:colors];
}

- (void)setNeedsEmptyIconWithBoolean:(jboolean)needsEmptyIcon {
  self->needsEmptyIcon_ = needsEmptyIcon;
}

- (void)setIconPaddingWithInt:(jint)padding {
  [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"drawablePadding" withId:JavaLangInteger_valueOfWithInt_(padding)];
}

- (void)setMaxLinesWithInt:(jint)maxLines {
  [((ADTextView *) nil_chk(textView_)) setMyAttributeWithNSString:@"maxLines" withId:JavaLangInteger_valueOfWithInt_(maxLines)];
}

- (void)initNavigationMenuItemView {
  [self inflateViewWithNSString:@"@layout/design_navigation_menu_item_new"];
  [self setIconSizeWithInt:JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"24dp"))];
  JreStrongAssign(&textView_, [self findViewByIdWithInt:ASIdGenerator_getIdWithNSString_(@"@+id/design_menu_item_text")]);
  [((ADTextView *) nil_chk(textView_)) setDuplicateParentStateEnabledWithBoolean:true];
}

- (void)dealloc {
  RELEASE_(textView_);
  RELEASE_(actionArea_);
  RELEASE_(itemData_);
  RELEASE_(iconTintList_);
  RELEASE_(emptyDrawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXMenuItemImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithADXMenuItemImpl:withInt:);
  methods[2].selector = @selector(initialize__WithADXMenuItemImpl:withBoolean:);
  methods[3].selector = @selector(shouldExpandActionArea);
  methods[4].selector = @selector(adjustAppearance);
  methods[5].selector = @selector(recycle);
  methods[6].selector = @selector(setActionViewWithADView:);
  methods[7].selector = @selector(getItemData);
  methods[8].selector = @selector(setTitleWithJavaLangCharSequence:);
  methods[9].selector = @selector(setCheckableWithBoolean:);
  methods[10].selector = @selector(setCheckedWithBoolean:);
  methods[11].selector = @selector(setIconWithADDrawable:);
  methods[12].selector = @selector(setIconSizeWithInt:);
  methods[13].selector = @selector(setIconTintListWithADColorStateList:);
  methods[14].selector = @selector(setTextAppearanceWithNSString:);
  methods[15].selector = @selector(setTextColorWithADColorStateList:);
  methods[16].selector = @selector(setNeedsEmptyIconWithBoolean:);
  methods[17].selector = @selector(setIconPaddingWithInt:);
  methods[18].selector = @selector(setMaxLinesWithInt:);
  methods[19].selector = @selector(initNavigationMenuItemView);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iconSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needsEmptyIcon_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checkable_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isBold_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "textView_", "LADTextView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionArea_", "LADFrameLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemData_", "LADXMenuItemImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iconTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasIconTintList_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "emptyDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LADXMenuItemImpl;I", "LADXMenuItemImpl;Z", "setActionView", "LADView;", "setTitle", "LJavaLangCharSequence;", "setCheckable", "Z", "setChecked", "setIcon", "LADDrawable;", "setIconSize", "I", "setIconTintList", "LADColorStateList;", "setTextAppearance", "LNSString;", "setTextColor", "setNeedsEmptyIcon", "setIconPadding", "setMaxLines" };
  static const J2ObjcClassInfo _ADXNavigationMenuItemView = { "NavigationMenuItemView", "com.google.android.material.internal", ptrTable, methods, fields, 7, 0x1, 20, 10, -1, -1, -1, -1, -1 };
  return &_ADXNavigationMenuItemView;
}

@end

void ADXNavigationMenuItemView_init(ADXNavigationMenuItemView *self) {
  ADXForegroundLinearLayout_init(self);
  self->isBold_ = true;
}

ADXNavigationMenuItemView *new_ADXNavigationMenuItemView_init() {
  J2OBJC_NEW_IMPL(ADXNavigationMenuItemView, init)
}

ADXNavigationMenuItemView *create_ADXNavigationMenuItemView_init() {
  J2OBJC_CREATE_IMPL(ADXNavigationMenuItemView, init)
}

jboolean ADXNavigationMenuItemView_shouldExpandActionArea(ADXNavigationMenuItemView *self) {
  return [((ADXMenuItemImpl *) nil_chk(self->itemData_)) getTitle] == nil && [((ADXMenuItemImpl *) nil_chk(self->itemData_)) getIcon] == nil && [((ADXMenuItemImpl *) nil_chk(self->itemData_)) getActionView] != nil;
}

void ADXNavigationMenuItemView_adjustAppearance(ADXNavigationMenuItemView *self) {
  if (ADXNavigationMenuItemView_shouldExpandActionArea(self)) {
    [((ADTextView *) nil_chk(self->textView_)) setVisibilityWithInt:ADView_GONE];
    if (self->actionArea_ != nil) {
      ADLinearLayout_LayoutParams *params = (ADLinearLayout_LayoutParams *) cast_chk([self->actionArea_ getLayoutParams], [ADLinearLayout_LayoutParams class]);
      ((ADLinearLayout_LayoutParams *) nil_chk(params))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
      [((ADFrameLayout *) nil_chk(self->actionArea_)) setLayoutParamsWithADViewGroup_LayoutParams:params];
    }
  }
  else {
    [((ADTextView *) nil_chk(self->textView_)) setVisibilityWithInt:ADView_VISIBLE];
    if (self->actionArea_ != nil) {
      ADLinearLayout_LayoutParams *params = (ADLinearLayout_LayoutParams *) cast_chk([self->actionArea_ getLayoutParams], [ADLinearLayout_LayoutParams class]);
      ((ADLinearLayout_LayoutParams *) nil_chk(params))->width_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
      [((ADFrameLayout *) nil_chk(self->actionArea_)) setLayoutParamsWithADViewGroup_LayoutParams:params];
    }
  }
}

void ADXNavigationMenuItemView_setActionViewWithADView_(ADXNavigationMenuItemView *self, ADView *actionView) {
  if (actionView != nil) {
    if (self->actionArea_ == nil) {
    }
    if ([actionView getParent] != nil) {
      [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk([actionView getParent], [ADViewGroup class])))) removeViewWithADView:actionView];
    }
    [((ADFrameLayout *) nil_chk(self->actionArea_)) removeAllViews];
    [((ADFrameLayout *) nil_chk(self->actionArea_)) addViewWithADView:actionView];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNavigationMenuItemView)
