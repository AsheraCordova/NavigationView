//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\navigation\NavigationBarMenuView.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BadgeDrawable.h"
#include "Color.h"
#include "ColorStateList.h"
#include "Context.h"
#include "Drawable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Menu.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuItemImpl.h"
#include "NavigationBarItemView.h"
#include "NavigationBarMenuView.h"
#include "NavigationBarPresenter.h"
#include "NavigationBarView.h"
#include "PluginInvoker.h"
#include "Pools.h"
#include "R.h"
#include "SparseArray.h"
#include "StateSet.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXNavigationBarMenuView () {
 @public
  id<ADView_OnClickListener> onClickListener_;
  id<ADPools_Pool> itemPool_;
  ADSparseArray *onTouchListeners_;
  int32_t labelVisibilityMode_;
  IOSObjectArray *buttons_;
  int32_t selectedItemId_;
  int32_t selectedItemPosition_;
  ADColorStateList *itemIconTint_;
  int32_t itemIconSize_;
  ADColorStateList *itemTextColorFromUser_;
  ADColorStateList *itemTextColorDefault_;
  NSString *itemTextAppearanceInactive_;
  NSString *itemTextAppearanceActive_;
  ADDrawable *itemBackground_;
  int32_t itemBackgroundRes_;
  ADSparseArray *badgeDrawables_;
  ADXNavigationBarPresenter *presenter_;
  ADXMenuBuilder *menu_;
}

- (ADXNavigationBarItemView *)getNewItem;

- (bool)isValidIdWithInt:(int32_t)viewId;

- (void)validateMenuItemIdWithInt:(int32_t)viewId;

- (void)recurseSetWithADViewGroup:(ADViewGroup *)parent
       withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener;

- (ADView *)getNavigationBarItemViewWithADView:(ADView *)v;

@end

J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, onClickListener_, id<ADView_OnClickListener>)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemPool_, id<ADPools_Pool>)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, onTouchListeners_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, buttons_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemIconTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemTextColorFromUser_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemTextColorDefault_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemTextAppearanceInactive_, NSString *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemTextAppearanceActive_, NSString *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, itemBackground_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, badgeDrawables_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, presenter_, ADXNavigationBarPresenter *)
J2OBJC_FIELD_SETTER(ADXNavigationBarMenuView, menu_, ADXMenuBuilder *)

inline int32_t ADXNavigationBarMenuView_get_ITEM_POOL_SIZE(void);
#define ADXNavigationBarMenuView_ITEM_POOL_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXNavigationBarMenuView, ITEM_POOL_SIZE, int32_t)

inline IOSIntArray *ADXNavigationBarMenuView_get_CHECKED_STATE_SET(void);
static IOSIntArray *ADXNavigationBarMenuView_CHECKED_STATE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXNavigationBarMenuView, CHECKED_STATE_SET, IOSIntArray *)

inline IOSIntArray *ADXNavigationBarMenuView_get_DISABLED_STATE_SET(void);
static IOSIntArray *ADXNavigationBarMenuView_DISABLED_STATE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXNavigationBarMenuView, DISABLED_STATE_SET, IOSIntArray *)

__attribute__((unused)) static ADXNavigationBarItemView *ADXNavigationBarMenuView_getNewItem(ADXNavigationBarMenuView *self);

__attribute__((unused)) static bool ADXNavigationBarMenuView_isValidIdWithInt_(ADXNavigationBarMenuView *self, int32_t viewId);

__attribute__((unused)) static void ADXNavigationBarMenuView_validateMenuItemIdWithInt_(ADXNavigationBarMenuView *self, int32_t viewId);

__attribute__((unused)) static void ADXNavigationBarMenuView_recurseSetWithADViewGroup_withADView_OnClickListener_(ADXNavigationBarMenuView *self, ADViewGroup *parent, id<ADView_OnClickListener> onClickListener);

__attribute__((unused)) static ADView *ADXNavigationBarMenuView_getNavigationBarItemViewWithADView_(ADXNavigationBarMenuView *self, ADView *v);

@interface ADXNavigationBarMenuView_1 : NSObject < ADView_OnClickListener > {
 @public
  ADXNavigationBarMenuView *this$0_;
}

- (instancetype)initWithADXNavigationBarMenuView:(ADXNavigationBarMenuView *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNavigationBarMenuView_1)

__attribute__((unused)) static void ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView_1 *self, ADXNavigationBarMenuView *outer$);

__attribute__((unused)) static ADXNavigationBarMenuView_1 *new_ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXNavigationBarMenuView_1 *create_ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView *outer$);


J2OBJC_INITIALIZED_DEFN(ADXNavigationBarMenuView)

IOSIntArray *ADXNavigationBarMenuView_EMPTY_STATE_SET;

@implementation ADXNavigationBarMenuView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXNavigationBarMenuView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithADXMenuBuilder:(ADXMenuBuilder *)menu {
  JreStrongAssign(&self->menu_, menu);
}

- (void)setIconTintListWithADColorStateList:(ADColorStateList *)tint {
  JreStrongAssign(&itemIconTint_, tint);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setIconTintListWithADColorStateList:tint];
      }
    }
  }
}

- (void)setItemIconSizeWithInt:(int32_t)iconSize {
  self->itemIconSize_ = iconSize;
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setIconSizeWithInt:iconSize];
      }
    }
  }
}

- (void)setItemTextColorWithADColorStateList:(ADColorStateList *)color {
  JreStrongAssign(&itemTextColorFromUser_, color);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setTextColorWithADColorStateList:color];
      }
    }
  }
}

- (void)setItemTextAppearanceInactiveWithNSString:(NSString *)textAppearanceRes {
  JreStrongAssign(&self->itemTextAppearanceInactive_, textAppearanceRes);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setTextAppearanceInactiveWithNSString:textAppearanceRes];
        if (itemTextColorFromUser_ != nil) {
          [item setTextColorWithADColorStateList:itemTextColorFromUser_];
        }
      }
    }
  }
}

- (void)setItemTextAppearanceActiveWithNSString:(NSString *)textAppearanceRes {
  JreStrongAssign(&self->itemTextAppearanceActive_, textAppearanceRes);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setTextAppearanceActiveWithNSString:textAppearanceRes];
        if (itemTextColorFromUser_ != nil) {
          [item setTextColorWithADColorStateList:itemTextColorFromUser_];
        }
      }
    }
  }
}

- (void)setItemBackgroundWithADDrawable:(ADDrawable *)background {
  JreStrongAssign(&itemBackground_, background);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        [item setItemBackgroundWithADDrawable:background];
      }
    }
  }
}

- (void)setLabelVisibilityModeWithInt:(int32_t)labelVisibilityMode {
  self->labelVisibilityMode_ = labelVisibilityMode;
}

- (int32_t)getLabelVisibilityMode {
  return labelVisibilityMode_;
}

- (void)setPresenterWithADXNavigationBarPresenter:(ADXNavigationBarPresenter *)presenter {
  JreStrongAssign(&self->presenter_, presenter);
}

- (void)buildMenuView {
  [self removeAllViews];
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        if (item != nil) {
          [((id<ADPools_Pool>) nil_chk(itemPool_)) release__WithId:item];
        }
      }
    }
  }
  if ([((ADXMenuBuilder *) nil_chk(menu_)) size] == 0) {
    selectedItemId_ = 0;
    selectedItemPosition_ = 0;
    JreStrongAssign(&buttons_, nil);
    return;
  }
  JreStrongAssignAndConsume(&buttons_, [IOSObjectArray newArrayWithLength:[((ADXMenuBuilder *) nil_chk(menu_)) size] type:ADXNavigationBarItemView_class_()]);
  bool shifting = [self isShiftingWithInt:labelVisibilityMode_ withInt:[((JavaUtilArrayList *) nil_chk([((ADXMenuBuilder *) nil_chk(menu_)) getVisibleItems])) size]];
  for (int32_t i = 0; i < [((ADXMenuBuilder *) nil_chk(menu_)) size]; i++) {
    [((ADXNavigationBarPresenter *) nil_chk(presenter_)) setUpdateSuspendedWithBoolean:true];
    [((id<ADMenuItem>) nil_chk([((ADXMenuBuilder *) nil_chk(menu_)) getItemWithInt:i])) setCheckableWithBoolean:true];
    [((ADXNavigationBarPresenter *) nil_chk(presenter_)) setUpdateSuspendedWithBoolean:false];
    ADXNavigationBarItemView *child = ADXNavigationBarMenuView_getNewItem(self);
    IOSObjectArray_Set(nil_chk(buttons_), i, child);
    [((ADXNavigationBarItemView *) nil_chk(child)) setIconTintListWithADColorStateList:itemIconTint_];
    [child setIconSizeWithInt:itemIconSize_];
    [child setTextColorWithADColorStateList:itemTextColorDefault_];
    [child setTextAppearanceInactiveWithNSString:itemTextAppearanceInactive_];
    [child setTextAppearanceActiveWithNSString:itemTextAppearanceActive_];
    [child setTextColorWithADColorStateList:itemTextColorFromUser_];
    if (itemBackground_ != nil) {
      [child setItemBackgroundWithADDrawable:itemBackground_];
    }
    else {
    }
    [child setShiftingWithBoolean:shifting];
    [child setLabelVisibilityModeWithInt:labelVisibilityMode_];
    ADXMenuItemImpl *item = (ADXMenuItemImpl *) cast_chk([((ADXMenuBuilder *) nil_chk(menu_)) getItemWithInt:i], [ADXMenuItemImpl class]);
    [child initialize__WithADXMenuItemImpl:item withInt:0];
    [child setItemPositionWithInt:i];
    int32_t itemId = [((ADXMenuItemImpl *) nil_chk(item)) getItemId];
    [child setMyAttributeWithNSString:@"onClick" withId:onClickListener_];
    ADXNavigationBarMenuView_recurseSetWithADViewGroup_withADView_OnClickListener_(self, child, onClickListener_);
    if (selectedItemId_ != ADMenu_NONE && itemId == selectedItemId_) {
      selectedItemPosition_ = i;
    }
    if (![self hasChildWithADView:child]) {
      [self addViewWithADView:child];
    }
  }
  selectedItemPosition_ = JavaLangMath_minWithInt_withInt_([((ADXMenuBuilder *) nil_chk(menu_)) size] - 1, selectedItemPosition_);
  [((id<ADMenuItem>) nil_chk([((ADXMenuBuilder *) nil_chk(menu_)) getItemWithInt:selectedItemPosition_])) setCheckedWithBoolean:true];
}

- (void)updateMenuView {
  if (menu_ == nil || buttons_ == nil) {
    return;
  }
  int32_t menuSize = [menu_ size];
  if (menuSize != ((IOSObjectArray *) nil_chk(buttons_))->size_) {
    [self buildMenuView];
    return;
  }
  int32_t previousSelectedId = selectedItemId_;
  for (int32_t i = 0; i < menuSize; i++) {
    id<ADMenuItem> item = JreRetainedLocalValue([((ADXMenuBuilder *) nil_chk(menu_)) getItemWithInt:i]);
    if ([((id<ADMenuItem>) nil_chk(item)) isChecked]) {
      selectedItemId_ = [item getItemId];
      selectedItemPosition_ = i;
    }
  }
  if (previousSelectedId != selectedItemId_) {
  }
  bool shifting = [self isShiftingWithInt:labelVisibilityMode_ withInt:[((JavaUtilArrayList *) nil_chk([((ADXMenuBuilder *) nil_chk(menu_)) getVisibleItems])) size]];
  for (int32_t i = 0; i < menuSize; i++) {
    [((ADXNavigationBarPresenter *) nil_chk(presenter_)) setUpdateSuspendedWithBoolean:true];
    [((ADXNavigationBarItemView *) nil_chk(IOSObjectArray_Get(nil_chk(buttons_), i))) setLabelVisibilityModeWithInt:labelVisibilityMode_];
    [((ADXNavigationBarItemView *) nil_chk(IOSObjectArray_Get(nil_chk(buttons_), i))) setShiftingWithBoolean:shifting];
    [((ADXNavigationBarItemView *) nil_chk(IOSObjectArray_Get(nil_chk(buttons_), i))) initialize__WithADXMenuItemImpl:(ADXMenuItemImpl *) cast_chk([((ADXMenuBuilder *) nil_chk(menu_)) getItemWithInt:i], [ADXMenuItemImpl class]) withInt:0];
    [((ADXNavigationBarPresenter *) nil_chk(presenter_)) setUpdateSuspendedWithBoolean:false];
  }
}

- (ADXNavigationBarItemView *)getNewItem {
  return ADXNavigationBarMenuView_getNewItem(self);
}

- (int32_t)getSelectedItemId {
  return selectedItemId_;
}

- (bool)isShiftingWithInt:(int32_t)labelVisibilityMode
                  withInt:(int32_t)childCount {
  return labelVisibilityMode == ADXNavigationBarView_LABEL_VISIBILITY_AUTO ? childCount > 3 : labelVisibilityMode == ADXNavigationBarView_LABEL_VISIBILITY_SELECTED;
}

- (ADXBadgeDrawable *)getOrCreateBadgeWithInt:(int32_t)menuItemId {
  ADXNavigationBarMenuView_validateMenuItemIdWithInt_(self, menuItemId);
  ADXBadgeDrawable *badgeDrawable = JreRetainedLocalValue([((ADSparseArray *) nil_chk(badgeDrawables_)) getWithInt:menuItemId]);
  if (badgeDrawable == nil) {
    badgeDrawable = ADXBadgeDrawable_createWithADContext_([self getContext]);
    [((ADSparseArray *) nil_chk(badgeDrawables_)) putWithInt:menuItemId withId:badgeDrawable];
  }
  ADXNavigationBarItemView *itemView = JreRetainedLocalValue([self findItemViewWithInt:menuItemId]);
  if (itemView != nil) {
    [itemView setBadgeWithADXBadgeDrawable:badgeDrawable];
  }
  return badgeDrawable;
}

- (ADXNavigationBarItemView *)findItemViewWithInt:(int32_t)menuItemId {
  ADXNavigationBarMenuView_validateMenuItemIdWithInt_(self, menuItemId);
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *itemView = RETAIN_AND_AUTORELEASE(*b__++);
        if ([itemView getId] == menuItemId) {
          return itemView;
        }
      }
    }
  }
  return nil;
}

- (ADXNavigationBarItemView *)createNavigationBarItemViewWithADContext:(ADContext *)context {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int32_t)getSelectedItemPosition {
  return selectedItemPosition_;
}

- (ADXMenuBuilder *)getMenu {
  return menu_;
}

- (bool)isValidIdWithInt:(int32_t)viewId {
  return ADXNavigationBarMenuView_isValidIdWithInt_(self, viewId);
}

- (void)validateMenuItemIdWithInt:(int32_t)viewId {
  ADXNavigationBarMenuView_validateMenuItemIdWithInt_(self, viewId);
}

- (void)recurseSetWithADViewGroup:(ADViewGroup *)parent
       withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener {
  ADXNavigationBarMenuView_recurseSetWithADViewGroup_withADView_OnClickListener_(self, parent, onClickListener);
}

- (ADView *)getNavigationBarItemViewWithADView:(ADView *)v {
  return ADXNavigationBarMenuView_getNavigationBarItemViewWithADView_(self, v);
}

- (ADColorStateList *)createDefaultColorStateListWithInt:(int32_t)baseColorThemeAttr {
  return create_ADColorStateList_initWithIntArray2_withIntArray_([IOSObjectArray arrayWithObjects:(id[]){ ADXNavigationBarMenuView_DISABLED_STATE_SET, ADXNavigationBarMenuView_CHECKED_STATE_SET, ADXNavigationBarMenuView_EMPTY_STATE_SET } count:3 type:IOSClass_intArray(1)], [IOSIntArray arrayWithInts:(int32_t[]){ ADColor_WHITE, ADColor_WHITE, ADColor_BLACK } count:3]);
}

- (void)requestLayout {
  [super requestLayout];
  if (buttons_ != nil) {
    {
      IOSObjectArray *a__ = buttons_;
      ADXNavigationBarItemView * const *b__ = a__->buffer_;
      ADXNavigationBarItemView * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADXNavigationBarItemView *item = RETAIN_AND_AUTORELEASE(*b__++);
        if (item != nil) {
          [item requestLayout];
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(onClickListener_);
  RELEASE_(itemPool_);
  RELEASE_(onTouchListeners_);
  RELEASE_(buttons_);
  RELEASE_(itemIconTint_);
  RELEASE_(itemTextColorFromUser_);
  RELEASE_(itemTextColorDefault_);
  RELEASE_(itemTextAppearanceInactive_);
  RELEASE_(itemTextAppearanceActive_);
  RELEASE_(itemBackground_);
  RELEASE_(badgeDrawables_);
  RELEASE_(presenter_);
  RELEASE_(menu_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXNavigationBarItemView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x0, 17, 5, -1, -1, -1, -1 },
    { NULL, "LADXNavigationBarItemView;", 0x1, 18, 5, -1, -1, -1, -1 },
    { NULL, "LADXNavigationBarItemView;", 0x404, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMenuBuilder;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, 27, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithADXMenuBuilder:);
  methods[2].selector = @selector(setIconTintListWithADColorStateList:);
  methods[3].selector = @selector(setItemIconSizeWithInt:);
  methods[4].selector = @selector(setItemTextColorWithADColorStateList:);
  methods[5].selector = @selector(setItemTextAppearanceInactiveWithNSString:);
  methods[6].selector = @selector(setItemTextAppearanceActiveWithNSString:);
  methods[7].selector = @selector(setItemBackgroundWithADDrawable:);
  methods[8].selector = @selector(setLabelVisibilityModeWithInt:);
  methods[9].selector = @selector(getLabelVisibilityMode);
  methods[10].selector = @selector(setPresenterWithADXNavigationBarPresenter:);
  methods[11].selector = @selector(buildMenuView);
  methods[12].selector = @selector(updateMenuView);
  methods[13].selector = @selector(getNewItem);
  methods[14].selector = @selector(getSelectedItemId);
  methods[15].selector = @selector(isShiftingWithInt:withInt:);
  methods[16].selector = @selector(getOrCreateBadgeWithInt:);
  methods[17].selector = @selector(findItemViewWithInt:);
  methods[18].selector = @selector(createNavigationBarItemViewWithADContext:);
  methods[19].selector = @selector(getSelectedItemPosition);
  methods[20].selector = @selector(getMenu);
  methods[21].selector = @selector(isValidIdWithInt:);
  methods[22].selector = @selector(validateMenuItemIdWithInt:);
  methods[23].selector = @selector(recurseSetWithADViewGroup:withADView_OnClickListener:);
  methods[24].selector = @selector(getNavigationBarItemViewWithADView:);
  methods[25].selector = @selector(createDefaultColorStateListWithInt:);
  methods[26].selector = @selector(requestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ITEM_POOL_SIZE", "I", .constantValue.asInt = ADXNavigationBarMenuView_ITEM_POOL_SIZE, 0x1a, -1, -1, -1, -1 },
    { "CHECKED_STATE_SET", "[I", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "DISABLED_STATE_SET", "[I", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "onClickListener_", "LADView_OnClickListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "itemPool_", "LADPools_Pool;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "onTouchListeners_", "LADSparseArray;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "labelVisibilityMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buttons_", "[LADXNavigationBarItemView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectedItemId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectedItemPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemIconTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemIconSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemTextColorFromUser_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemTextColorDefault_", "LADColorStateList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "itemTextAppearanceInactive_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemTextAppearanceActive_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemBackground_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemBackgroundRes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeDrawables_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 32, -1 },
    { "presenter_", "LADXNavigationBarPresenter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "menu_", "LADXMenuBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EMPTY_STATE_SET", "[I", .constantValue.asLong = 0, 0x1c, -1, 33, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "LADXMenuBuilder;", "setIconTintList", "LADColorStateList;", "setItemIconSize", "I", "setItemTextColor", "setItemTextAppearanceInactive", "LNSString;", "setItemTextAppearanceActive", "setItemBackground", "LADDrawable;", "setLabelVisibilityMode", "setPresenter", "LADXNavigationBarPresenter;", "isShifting", "II", "getOrCreateBadge", "findItemView", "createNavigationBarItemView", "LADContext;", "isValidId", "validateMenuItemId", "recurseSet", "LADViewGroup;LADView_OnClickListener;", "getNavigationBarItemView", "LADView;", "createDefaultColorStateList", &ADXNavigationBarMenuView_CHECKED_STATE_SET, &ADXNavigationBarMenuView_DISABLED_STATE_SET, "Lr/android/util/Pools$Pool<Lcom/google/android/material/navigation/NavigationBarItemView;>;", "Lr/android/util/SparseArray<Lr/android/view/View$OnTouchListener;>;", "Lr/android/util/SparseArray<Lcom/google/android/material/badge/BadgeDrawable;>;", &ADXNavigationBarMenuView_EMPTY_STATE_SET };
  static const J2ObjcClassInfo _ADXNavigationBarMenuView = { "NavigationBarMenuView", "com.google.android.material.navigation", ptrTable, methods, fields, 7, 0x401, 27, 22, -1, -1, -1, -1, -1 };
  return &_ADXNavigationBarMenuView;
}

+ (void)initialize {
  if (self == [ADXNavigationBarMenuView class]) {
    JreStrongAssignAndConsume(&ADXNavigationBarMenuView_CHECKED_STATE_SET, [IOSIntArray newArrayWithInts:(int32_t[]){ ADR_attr_state_checked } count:1]);
    JreStrongAssignAndConsume(&ADXNavigationBarMenuView_DISABLED_STATE_SET, [IOSIntArray newArrayWithInts:(int32_t[]){ -ADR_attr_state_enabled } count:1]);
    JreStrongAssign(&ADXNavigationBarMenuView_EMPTY_STATE_SET, ADStateSet_getWithInt_(0));
    J2OBJC_SET_INITIALIZED(ADXNavigationBarMenuView)
  }
}

@end

void ADXNavigationBarMenuView_init(ADXNavigationBarMenuView *self) {
  ADViewGroup_init(self);
  JreStrongAssignAndConsume(&self->itemPool_, new_ADPools_SynchronizedPool_initWithInt_(ADXNavigationBarMenuView_ITEM_POOL_SIZE));
  JreStrongAssignAndConsume(&self->onTouchListeners_, new_ADSparseArray_initWithInt_(ADXNavigationBarMenuView_ITEM_POOL_SIZE));
  self->selectedItemId_ = 0;
  self->selectedItemPosition_ = 0;
  JreStrongAssignAndConsume(&self->badgeDrawables_, new_ADSparseArray_initWithInt_(ADXNavigationBarMenuView_ITEM_POOL_SIZE));
  JreStrongAssign(&self->itemTextColorDefault_, [self createDefaultColorStateListWithInt:0]);
  JreStrongAssignAndConsume(&self->onClickListener_, new_ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(self));
}

ADXNavigationBarItemView *ADXNavigationBarMenuView_getNewItem(ADXNavigationBarMenuView *self) {
  ADXNavigationBarItemView *item = JreRetainedLocalValue([((id<ADPools_Pool>) nil_chk(self->itemPool_)) acquire]);
  if (item == nil) {
    item = [self createNavigationBarItemViewWithADContext:[self getContext]];
  }
  return item;
}

bool ADXNavigationBarMenuView_isValidIdWithInt_(ADXNavigationBarMenuView *self, int32_t viewId) {
  return viewId != ADView_NO_ID;
}

void ADXNavigationBarMenuView_validateMenuItemIdWithInt_(ADXNavigationBarMenuView *self, int32_t viewId) {
  if (!ADXNavigationBarMenuView_isValidIdWithInt_(self, viewId)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("I$", viewId, @" is not a valid view id"));
  }
}

void ADXNavigationBarMenuView_recurseSetWithADViewGroup_withADView_OnClickListener_(ADXNavigationBarMenuView *self, ADViewGroup *parent, id<ADView_OnClickListener> onClickListener) {
  if ([((NSString *) nil_chk(ASPluginInvoker_getOS())) java_equalsIgnoreCase:@"swt"]) {
    for (int32_t i = 0; i < [((ADViewGroup *) nil_chk(parent)) getChildCount]; i++) {
      ADView *child = JreRetainedLocalValue([parent getChildAtWithInt:i]);
      [((ADView *) nil_chk(child)) setMyAttributeWithNSString:@"onClick" withId:onClickListener];
      if ([child isKindOfClass:[ADViewGroup class]]) {
        ADXNavigationBarMenuView_recurseSetWithADViewGroup_withADView_OnClickListener_(self, (ADViewGroup *) child, onClickListener);
      }
    }
  }
}

ADView *ADXNavigationBarMenuView_getNavigationBarItemViewWithADView_(ADXNavigationBarMenuView *self, ADView *v) {
  while (!([v isKindOfClass:[ADXNavigationBarItemView class]])) {
    v = (ADView *) cast_chk([((ADView *) nil_chk(v)) getParent], [ADView class]);
  }
  return v;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNavigationBarMenuView)

J2OBJC_NAME_MAPPING(ADXNavigationBarMenuView, "com.google.android.material.navigation", "ADX")

@implementation ADXNavigationBarMenuView_1

- (instancetype)initWithADXNavigationBarMenuView:(ADXNavigationBarMenuView *)outer$ {
  ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  v = ADXNavigationBarMenuView_getNavigationBarItemViewWithADView_(this$0_, v);
  ADXNavigationBarItemView *itemView = (ADXNavigationBarItemView *) cast_chk(v, [ADXNavigationBarItemView class]);
  id<ADMenuItem> item = JreRetainedLocalValue([((ADXNavigationBarItemView *) nil_chk(itemView)) getItemData]);
  if (![((ADXMenuBuilder *) nil_chk(this$0_->menu_)) performItemActionWithADMenuItem:item withADXMenuPresenter:this$0_->presenter_ withInt:0]) {
    [((id<ADMenuItem>) nil_chk(item)) setCheckedWithBoolean:true];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXNavigationBarMenuView:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXNavigationBarMenuView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXNavigationBarMenuView;", "onClick", "LADView;", "init" };
  static const J2ObjcClassInfo _ADXNavigationBarMenuView_1 = { "", "com.google.android.material.navigation", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADXNavigationBarMenuView_1;
}

@end

void ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView_1 *self, ADXNavigationBarMenuView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXNavigationBarMenuView_1 *new_ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView *outer$) {
  J2OBJC_NEW_IMPL(ADXNavigationBarMenuView_1, initWithADXNavigationBarMenuView_, outer$)
}

ADXNavigationBarMenuView_1 *create_ADXNavigationBarMenuView_1_initWithADXNavigationBarMenuView_(ADXNavigationBarMenuView *outer$) {
  J2OBJC_CREATE_IMPL(ADXNavigationBarMenuView_1, initWithADXNavigationBarMenuView_, outer$)
}
