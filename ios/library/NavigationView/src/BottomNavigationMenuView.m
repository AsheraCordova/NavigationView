//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\bottomnavigation\BottomNavigationMenuView.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BottomNavigationItemView.h"
#include "BottomNavigationMenuView.h"
#include "BottomNavigationView.h"
#include "Context.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "HasWidgets.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "NavigationBarItemView.h"
#include "NavigationBarMenuView.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXBottomNavigationMenuView () {
 @public
  int32_t inactiveItemMaxWidth_;
  int32_t inactiveItemMinWidth_;
  int32_t activeItemMaxWidth_;
  int32_t activeItemMinWidth_;
  int32_t itemHeight_;
  bool itemHorizontalTranslationEnabled_;
  IOSIntArray *tempChildWidths_;
}

@end

J2OBJC_FIELD_SETTER(ADXBottomNavigationMenuView, tempChildWidths_, IOSIntArray *)

@implementation ADXBottomNavigationMenuView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXBottomNavigationMenuView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  ADXMenuBuilder *menu = [self getMenu];
  int32_t width = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  int32_t visibleCount = [((JavaUtilArrayList *) nil_chk([((ADXMenuBuilder *) nil_chk(menu)) getVisibleItems])) size];
  int32_t totalCount = [self getChildCount];
  int32_t heightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(itemHeight_, ADView_MeasureSpec_EXACTLY);
  if ([self isShiftingWithInt:[self getLabelVisibilityMode] withInt:visibleCount] && [self isItemHorizontalTranslationEnabled]) {
    ADView *activeChild = [self getChildAtWithInt:[self getSelectedItemPosition]];
    int32_t activeItemWidth = activeItemMinWidth_;
    if ([((ADView *) nil_chk(activeChild)) getVisibility] != ADView_GONE) {
      [activeChild measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(activeItemMaxWidth_, ADView_MeasureSpec_AT_MOST) withInt:heightSpec];
      activeItemWidth = JavaLangMath_maxWithInt_withInt_(activeItemWidth, [activeChild getMeasuredWidth]);
    }
    int32_t inactiveCount = visibleCount - ([activeChild getVisibility] != ADView_GONE ? 1 : 0);
    int32_t activeMaxAvailable = width - inactiveCount * inactiveItemMinWidth_;
    int32_t activeWidth = JavaLangMath_minWithInt_withInt_(activeMaxAvailable, JavaLangMath_minWithInt_withInt_(activeItemWidth, activeItemMaxWidth_));
    int32_t inactiveMaxAvailable = JreIntDiv((width - activeWidth), (inactiveCount == 0 ? 1 : inactiveCount));
    int32_t inactiveWidth = JavaLangMath_minWithInt_withInt_(inactiveMaxAvailable, inactiveItemMaxWidth_);
    int32_t extra = width - activeWidth - inactiveWidth * inactiveCount;
    for (int32_t i = 0; i < totalCount; i++) {
      if ([((ADView *) nil_chk([self getChildAtWithInt:i])) getVisibility] != ADView_GONE) {
        *IOSIntArray_GetRef(nil_chk(tempChildWidths_), i) = (i == [self getSelectedItemPosition]) ? activeWidth : inactiveWidth;
        if (extra > 0) {
          (*IOSIntArray_GetRef(nil_chk(tempChildWidths_), i))++;
          extra--;
        }
      }
      else {
        *IOSIntArray_GetRef(nil_chk(tempChildWidths_), i) = 0;
      }
    }
  }
  else {
    int32_t maxAvailable = JreIntDiv(width, (visibleCount == 0 ? 1 : visibleCount));
    int32_t childWidth = JavaLangMath_minWithInt_withInt_(maxAvailable, activeItemMaxWidth_);
    int32_t extra = width - childWidth * visibleCount;
    for (int32_t i = 0; i < totalCount; i++) {
      if ([((ADView *) nil_chk([self getChildAtWithInt:i])) getVisibility] != ADView_GONE) {
        *IOSIntArray_GetRef(nil_chk(tempChildWidths_), i) = childWidth;
        if (extra > 0) {
          (*IOSIntArray_GetRef(tempChildWidths_, i))++;
          extra--;
        }
      }
      else {
        *IOSIntArray_GetRef(nil_chk(tempChildWidths_), i) = 0;
      }
    }
  }
  int32_t totalWidth = 0;
  for (int32_t i = 0; i < totalCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    [child measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(IOSIntArray_Get(nil_chk(tempChildWidths_), i), ADView_MeasureSpec_EXACTLY) withInt:heightSpec];
    ADViewGroup_LayoutParams *params = JreRetainedLocalValue([child getLayoutParams]);
    ((ADViewGroup_LayoutParams *) nil_chk(params))->width_ = [child getMeasuredWidth];
    totalWidth += [child getMeasuredWidth];
  }
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(totalWidth, ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(totalWidth, ADView_MeasureSpec_EXACTLY), 0) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(itemHeight_, heightSpec, 0)];
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)left
                    withInt:(int32_t)top
                    withInt:(int32_t)right
                    withInt:(int32_t)bottom {
  int32_t count = [self getChildCount];
  int32_t width = right - left;
  int32_t height = bottom - top;
  int32_t used = 0;
  for (int32_t i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    if (ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL) {
      [child layoutWithInt:width - used - [child getMeasuredWidth] withInt:0 withInt:width - used withInt:height];
    }
    else {
      [child layoutWithInt:used withInt:0 withInt:[child getMeasuredWidth] + used withInt:height];
    }
    used += [child getMeasuredWidth];
  }
}

- (void)setItemHorizontalTranslationEnabledWithBoolean:(bool)itemHorizontalTranslationEnabled {
  self->itemHorizontalTranslationEnabled_ = itemHorizontalTranslationEnabled;
}

- (bool)isItemHorizontalTranslationEnabled {
  return itemHorizontalTranslationEnabled_;
}

- (ADXNavigationBarItemView *)createNavigationBarItemViewWithADContext:(ADContext *)context {
  NSString *name = [ADXBottomNavigationItemView_class_() getName];
  id<ASIWidget> widget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(name, name, (id<ASHasWidgets>) cast_check([((id<ASILifeCycleDecorator>) cast_check(self, ASILifeCycleDecorator_class_())) getWidget], ASHasWidgets_class_()), false);
  return (ADXBottomNavigationItemView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADXBottomNavigationItemView class]);
}

- (void)dealloc {
  RELEASE_(tempChildWidths_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXNavigationBarItemView;", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(setItemHorizontalTranslationEnabledWithBoolean:);
  methods[4].selector = @selector(isItemHorizontalTranslationEnabled);
  methods[5].selector = @selector(createNavigationBarItemViewWithADContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inactiveItemMaxWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "inactiveItemMinWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "activeItemMaxWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "activeItemMinWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "itemHeight_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "itemHorizontalTranslationEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tempChildWidths_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onMeasure", "II", "onLayout", "ZIIII", "setItemHorizontalTranslationEnabled", "Z", "createNavigationBarItemView", "LADContext;" };
  static const J2ObjcClassInfo _ADXBottomNavigationMenuView = { "BottomNavigationMenuView", "com.google.android.material.bottomnavigation", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_ADXBottomNavigationMenuView;
}

@end

void ADXBottomNavigationMenuView_init(ADXBottomNavigationMenuView *self) {
  ADXNavigationBarMenuView_init(self);
  ADFrameLayout_LayoutParams *params = create_ADFrameLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  params->gravity_ = ADGravity_CENTER;
  [self setLayoutParamsWithADViewGroup_LayoutParams:params];
  self->inactiveItemMaxWidth_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"96dp"));
  self->inactiveItemMinWidth_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"56dp"));
  self->activeItemMaxWidth_ = (int32_t) ASPluginInvoker_getScreenWidth();
  self->activeItemMinWidth_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"96dp"));
  self->itemHeight_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"56dp"));
  JreStrongAssignAndConsume(&self->tempChildWidths_, [IOSIntArray newArrayWithLength:ADXBottomNavigationView_MAX_ITEM_COUNT]);
}

ADXBottomNavigationMenuView *new_ADXBottomNavigationMenuView_init() {
  J2OBJC_NEW_IMPL(ADXBottomNavigationMenuView, init)
}

ADXBottomNavigationMenuView *create_ADXBottomNavigationMenuView_init() {
  J2OBJC_CREATE_IMPL(ADXBottomNavigationMenuView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBottomNavigationMenuView)

J2OBJC_NAME_MAPPING(ADXBottomNavigationMenuView, "com.google.android.material.bottomnavigation", "ADX")
