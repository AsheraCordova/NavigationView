//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJNavigationView\src\main\java\com\google\android\material\navigationrail\NavigationRailMenuView.java
//

#include "Context.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "HasWidgets.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "NavigationBarItemView.h"
#include "NavigationBarMenuView.h"
#include "NavigationRailItemView.h"
#include "NavigationRailMenuView.h"
#include "NavigationRailView.h"
#include "View.h"
#include "ViewGroup.h"
#include "WidgetFactory.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"


@interface ADXNavigationRailMenuView () {
 @public
  ADFrameLayout_LayoutParams *layoutParams_;
}

- (jint)makeSharedHeightSpecWithInt:(jint)parentWidthSpec
                            withInt:(jint)maxHeight
                            withInt:(jint)shareCount;

- (jint)measureShiftingChildHeightsWithInt:(jint)widthMeasureSpec
                                   withInt:(jint)maxHeight
                                   withInt:(jint)shareCount;

- (jint)measureSharedChildHeightsWithInt:(jint)widthMeasureSpec
                                 withInt:(jint)maxHeight
                                 withInt:(jint)shareCount
                              withADView:(ADView *)selectedView;

- (jint)measureChildHeightWithADView:(ADView *)child
                             withInt:(jint)widthMeasureSpec
                             withInt:(jint)heightMeasureSpec;

@end

J2OBJC_FIELD_SETTER(ADXNavigationRailMenuView, layoutParams_, ADFrameLayout_LayoutParams *)

__attribute__((unused)) static jint ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(ADXNavigationRailMenuView *self, jint parentWidthSpec, jint maxHeight, jint shareCount);

__attribute__((unused)) static jint ADXNavigationRailMenuView_measureShiftingChildHeightsWithInt_withInt_withInt_(ADXNavigationRailMenuView *self, jint widthMeasureSpec, jint maxHeight, jint shareCount);

__attribute__((unused)) static jint ADXNavigationRailMenuView_measureSharedChildHeightsWithInt_withInt_withInt_withADView_(ADXNavigationRailMenuView *self, jint widthMeasureSpec, jint maxHeight, jint shareCount, ADView *selectedView);

__attribute__((unused)) static jint ADXNavigationRailMenuView_measureChildHeightWithADView_withInt_withInt_(ADXNavigationRailMenuView *self, ADView *child, jint widthMeasureSpec, jint heightMeasureSpec);

@implementation ADXNavigationRailMenuView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXNavigationRailMenuView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initNavigationRailMenuView {
  ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams_))->gravity_ = ADXNavigationRailView_DEFAULT_MENU_GRAVITY;
  [self setLayoutParamsWithADViewGroup_LayoutParams:layoutParams_];
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint maxHeight = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  jint visibleCount = [((JavaUtilArrayList *) nil_chk([((ADXMenuBuilder *) nil_chk([self getMenu])) getVisibleItems])) size];
  jint measuredHeight;
  if (visibleCount > 1 && [self isShiftingWithInt:[self getLabelVisibilityMode] withInt:visibleCount]) {
    measuredHeight = ADXNavigationRailMenuView_measureShiftingChildHeightsWithInt_withInt_withInt_(self, widthMeasureSpec, maxHeight, visibleCount);
  }
  else {
    measuredHeight = ADXNavigationRailMenuView_measureSharedChildHeightsWithInt_withInt_withInt_withADView_(self, widthMeasureSpec, maxHeight, visibleCount, nil);
  }
  jint parentWidth = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(parentWidth, widthMeasureSpec, 0) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(measuredHeight, heightMeasureSpec, 0)];
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  jint count = [self getChildCount];
  jint width = right - left;
  jint used = 0;
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      jint childHeight = [child getMeasuredHeight];
      [child layoutWithInt:0 withInt:used withInt:width withInt:childHeight + used];
      used += childHeight;
    }
  }
}

- (ADXNavigationBarItemView *)createNavigationBarItemViewWithADContext:(ADContext *)context {
  NSString *name = [ADXNavigationRailItemView_class_() getName];
  id<ASIWidget> widget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(name, name, (id<ASHasWidgets>) cast_check([((id<ASILifeCycleDecorator>) cast_check(self, ASILifeCycleDecorator_class_())) getWidget], ASHasWidgets_class_()), false);
  return (ADXNavigationRailItemView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADXNavigationRailItemView class]);
}

- (jint)makeSharedHeightSpecWithInt:(jint)parentWidthSpec
                            withInt:(jint)maxHeight
                            withInt:(jint)shareCount {
  return ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(self, parentWidthSpec, maxHeight, shareCount);
}

- (jint)measureShiftingChildHeightsWithInt:(jint)widthMeasureSpec
                                   withInt:(jint)maxHeight
                                   withInt:(jint)shareCount {
  return ADXNavigationRailMenuView_measureShiftingChildHeightsWithInt_withInt_withInt_(self, widthMeasureSpec, maxHeight, shareCount);
}

- (jint)measureSharedChildHeightsWithInt:(jint)widthMeasureSpec
                                 withInt:(jint)maxHeight
                                 withInt:(jint)shareCount
                              withADView:(ADView *)selectedView {
  return ADXNavigationRailMenuView_measureSharedChildHeightsWithInt_withInt_withInt_withADView_(self, widthMeasureSpec, maxHeight, shareCount, selectedView);
}

- (jint)measureChildHeightWithADView:(ADView *)child
                             withInt:(jint)widthMeasureSpec
                             withInt:(jint)heightMeasureSpec {
  return ADXNavigationRailMenuView_measureChildHeightWithADView_withInt_withInt_(self, child, widthMeasureSpec, heightMeasureSpec);
}

- (void)setMenuGravityWithInt:(jint)gravity {
  if (((ADFrameLayout_LayoutParams *) nil_chk(layoutParams_))->gravity_ != gravity) {
    layoutParams_->gravity_ = gravity;
    [self setLayoutParamsWithADViewGroup_LayoutParams:layoutParams_];
  }
}

- (jint)getMenuGravity {
  return ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams_))->gravity_;
}

- (jboolean)isTopGravity {
  return (((ADFrameLayout_LayoutParams *) nil_chk(layoutParams_))->gravity_ & ADGravity_VERTICAL_GRAVITY_MASK) == ADGravity_TOP;
}

- (void)dealloc {
  RELEASE_(layoutParams_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXNavigationBarItemView;", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initNavigationRailMenuView);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(createNavigationBarItemViewWithADContext:);
  methods[5].selector = @selector(makeSharedHeightSpecWithInt:withInt:withInt:);
  methods[6].selector = @selector(measureShiftingChildHeightsWithInt:withInt:withInt:);
  methods[7].selector = @selector(measureSharedChildHeightsWithInt:withInt:withInt:withADView:);
  methods[8].selector = @selector(measureChildHeightWithADView:withInt:withInt:);
  methods[9].selector = @selector(setMenuGravityWithInt:);
  methods[10].selector = @selector(getMenuGravity);
  methods[11].selector = @selector(isTopGravity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "layoutParams_", "LADFrameLayout_LayoutParams;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onMeasure", "II", "onLayout", "ZIIII", "createNavigationBarItemView", "LADContext;", "makeSharedHeightSpec", "III", "measureShiftingChildHeights", "measureSharedChildHeights", "IIILADView;", "measureChildHeight", "LADView;II", "setMenuGravity", "I" };
  static const J2ObjcClassInfo _ADXNavigationRailMenuView = { "NavigationRailMenuView", "com.google.android.material.navigationrail", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_ADXNavigationRailMenuView;
}

@end

void ADXNavigationRailMenuView_init(ADXNavigationRailMenuView *self) {
  ADXNavigationBarMenuView_init(self);
  JreStrongAssignAndConsume(&self->layoutParams_, new_ADFrameLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT));
}

ADXNavigationRailMenuView *new_ADXNavigationRailMenuView_init() {
  J2OBJC_NEW_IMPL(ADXNavigationRailMenuView, init)
}

ADXNavigationRailMenuView *create_ADXNavigationRailMenuView_init() {
  J2OBJC_CREATE_IMPL(ADXNavigationRailMenuView, init)
}

jint ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(ADXNavigationRailMenuView *self, jint parentWidthSpec, jint maxHeight, jint shareCount) {
  jint maxAvailable = JreIntDiv(maxHeight, JavaLangMath_maxWithInt_withInt_(1, shareCount));
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_minWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(parentWidthSpec), maxAvailable), ADView_MeasureSpec_UNSPECIFIED);
}

jint ADXNavigationRailMenuView_measureShiftingChildHeightsWithInt_withInt_withInt_(ADXNavigationRailMenuView *self, jint widthMeasureSpec, jint maxHeight, jint shareCount) {
  jint selectedViewHeight = 0;
  ADView *selectedView = JreRetainedLocalValue([self getChildAtWithInt:[self getSelectedItemPosition]]);
  if (selectedView != nil) {
    jint childHeightSpec = ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(self, widthMeasureSpec, maxHeight, shareCount);
    selectedViewHeight = ADXNavigationRailMenuView_measureChildHeightWithADView_withInt_withInt_(self, selectedView, widthMeasureSpec, childHeightSpec);
    maxHeight -= selectedViewHeight;
    --shareCount;
  }
  return selectedViewHeight + ADXNavigationRailMenuView_measureSharedChildHeightsWithInt_withInt_withInt_withADView_(self, widthMeasureSpec, maxHeight, shareCount, selectedView);
}

jint ADXNavigationRailMenuView_measureSharedChildHeightsWithInt_withInt_withInt_withADView_(ADXNavigationRailMenuView *self, jint widthMeasureSpec, jint maxHeight, jint shareCount, ADView *selectedView) {
  jint childHeightSpec = ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(self, widthMeasureSpec, maxHeight, shareCount);
  if (selectedView == nil) {
    childHeightSpec = ADXNavigationRailMenuView_makeSharedHeightSpecWithInt_withInt_withInt_(self, widthMeasureSpec, maxHeight, shareCount);
  }
  else {
    childHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([selectedView getMeasuredHeight], ADView_MeasureSpec_UNSPECIFIED);
  }
  jint childCount = [self getChildCount];
  jint totalHeight = 0;
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if (child != selectedView) {
      totalHeight += ADXNavigationRailMenuView_measureChildHeightWithADView_withInt_withInt_(self, child, widthMeasureSpec, childHeightSpec);
    }
  }
  return totalHeight;
}

jint ADXNavigationRailMenuView_measureChildHeightWithADView_withInt_withInt_(ADXNavigationRailMenuView *self, ADView *child, jint widthMeasureSpec, jint heightMeasureSpec) {
  if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
    [child measureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
    return [child getMeasuredHeight];
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNavigationRailMenuView)
